[{"categories":["Tools"],"content":"安装 docker pull grafana/grafana ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:1","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"准备存储空间 mkdir -p /data/grafana ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:2","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"启动 docker run -d -p 3000:3000 -v /data/grafana:/var/lib/grafana --name grafana grafana/grafana ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:3","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"登录 浏览器访问http://localhost:3000/login 默认用户名密码为: admin/admin 参考Configure a Grafana Docker image ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:4","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"安装ClickHouse plugins 参考https://grafana.com/grafana/plugins/vertamedia-clickhouse-datasource/ grafana-cli plugins install vertamedia-clickhouse-datasource docker restart grafana ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:5","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"配置数据源 Configuration \u003e Data Sources \u003e Add data source 输入URL Access选择Server(default)。 Auth选择Basic auth 在Basic Auth Details 中输入 User 和 Password。 Additional 根据情况设置Default database ,如默认则无需设置 ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:6","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"创建 Dashboard Create \u003e Dashboard \u003e Add new panl菜单,编辑Query tab页 选择数据源 Form 选择database名称及表名 Format As 选择展示方式：时间序列或表格 Text edit modle 输入SQL 以展示数据库中两列值trade_date,high为例 trade_date格式为20200319,high格式为61.64 Format As: Time Series 库/表 ： tushare/dailies SELECT (intDiv(toUInt32(toDateTime(concat(substr(trade_date, 1, 4), '-', substr(trade_date, 5, 2), '-', substr(trade_date, 7, 2), ' ', '00:00:00'))), 2) * 2) * 1000 as t, high FROM $table WHERE ts_code = '689009.SH' ORDER BY t Query inspector 验证sql及数据 Apply 更改 ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:7","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"导入Dashboard Dashboards \u003e manage \u003e Import 页 输入grafana.com dashborad url 或者id https://grafana.com/grafana/dashboards ","date":"2021-03-18","objectID":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/:0:8","tags":null,"title":"Grafana安装及使用","uri":"/mysite-public/grafana%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"下载镜像 docker pull yandex/clickhouse-server 准备数据目录 clickhouse server 重要目录介绍 数据文件: /var/lib/clickhouse 配置文件: /etc/clickhouse-sever 日志文件: /var/log/clickhouse-server 以/data为外接存储为例,新建数据目录 mkdir -p /data/clickhouse 启动clickhouse数据库 docker run -d --name clickhouse-server \\ --ulimit nofile=262144:262144 \\ --volume=/data/clickhouse:/var/lib/clickhouse \\ -p 8123:8123 \\ -p 9000:9000 \\ -p 9009:9009 \\ yandex/clickhouse-server 新建数据库用户 clickhouse默认账号为default,密码为空 本示例新建名为clickhouse的用户 容器内无vim命令 准备用户配置文件模板 docker cp clickhouse-server:/etc/clickhouse-server/users.xml users.xml 准备SHA256加密的密码 命令格式如下 PASSWORD=$(base64 \u003c /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | sha256sum | tr -d '-' 注意替换密码，如\"123456\" 替换 “$PASSWORD” 执行后，会输出密码明文及SHA256密码串 PASSWORD=$(base64 \u003c /dev/urandom | head -c8); echo \"123456\"; echo -n \"123456\" | sha256sum | tr -d '-' 123456 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 修改用户配置文件 创建新用户置文件 cp users.xml clickhouse.xml 修改用户名 修改users.xml的yandex–\u003eusers–\u003edefault 节点 把节点名称由default替换为clickhouse 修改用户密码 修改users.xml的yandex–\u003eusers–\u003eclickhouse–\u003epassword 节点 由password替换为password_sha256_hex,并填入SHA256密码串. 如: \u003cpassword_sha256_hex\u003e8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\u003c/password_sha256_hex\u003e 上传用户配置文件到容器 新用户的配置文件放到容器中/etc/clickhouse-server/users.d/下 docker cp clickhouse.xml clickhouse-server:/etc/clickhouse-server/users.d/clickhouse.xml 注意文件权限 新用户登录测试 docker exec -it clickhouse-server /bin/bash clickhouse-client -u clickhouse --password 123456 收到类似如下提示意即为成功 ClickHouse client version 21.1.2.15 (official build). Connecting to localhost:9000 as user clickhouse. Connected to ClickHouse server version 21.1.2 revision 54443. 安装Tabix docker run -d -p 8080:80 spoonest/clickhouse-tabix-web-client 访问Tabix UI 浏览器打开http://localhost:8080/ 根据实际情况把localhost替换成实际IP DIRECT CH tab页输入相关参数即可连接 ","date":"2021-03-10","objectID":"/mysite-public/%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2clickhouse%E5%8F%8Atabix/:0:0","tags":null,"title":"容器化部署Clickhouse及Tabix","uri":"/mysite-public/%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2clickhouse%E5%8F%8Atabix/"},{"categories":["Tech"],"content":"安装epel，zfs仓库 epel可以使用中科院开源软件协会等 mirrors.opencas.cn keys不用管，安装库里软件时会提示import 安装zfs yum install zfs kernel-devel等会自动安装 内核加载zfs模块 提示zfs not found 重启系统（dmks staus显示added，没有安装） 重启后变为installed modprobe zfs 导入pool 升级pool 正常使用 重启后自动import crontab 加如下内容 @reboot sleep 30；/sbin/zpool import data zfs get sharenfs systemctl start rpcbind systemctl enable nfs systemctl start nfs 共享设置 vi /etc/exports /data/Downloads 192.168.2.0/24（rw，no_root_squash，sync）后来又加上insecure 不加macmount不上 mac上远程挂载 mount -t nfs 192.168.2.215/data/Downloads /data/Downloads zfs set sharesmb=on data zfs建文件系统时要加casesensitivity=mixed属性 与windows共享方便阅览 ","date":"2021-03-09","objectID":"/mysite-public/centos%E4%BD%BF%E7%94%A8zfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/:0:0","tags":null,"title":"Centos使用ZFS文件系统","uri":"/mysite-public/centos%E4%BD%BF%E7%94%A8zfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"},{"categories":["Tech"],"content":"cat /etc/keepalived/keepalived.conf global_defs { router_id nginx_apiserver__test } vrrp_script chk_nginx { script \"/etc/keepalived/check_nginx.sh\" interval 5 weight 2 } vrrp_instance VI_1 { state BACKUP interface ens192 virtual_router_id 51 priority 99 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 1.1.1.1/24 } } check_nginx.sh 脚本内容 #!/bin/bash A=`ps -C nginx --no-header |wc -l` if [ $A -eq 0 ];then systemctl start nginx #重启nginx if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then #nginx重启失败 exit 1 else exit 0 fi else exit 0 fi ","date":"2021-03-09","objectID":"/mysite-public/nginx-keepalived%E5%AE%9E%E7%8E%B0apiserver%E9%AB%98%E5%8F%AF%E7%94%A8/:0:0","tags":null,"title":"Nginx+keepalived实现apiserver高可用","uri":"/mysite-public/nginx-keepalived%E5%AE%9E%E7%8E%B0apiserver%E9%AB%98%E5%8F%AF%E7%94%A8/"},{"categories":["Tech"],"content":" groupadd -g 1100 xprice useradd -u 1101 -g 1100 -d /tmp/xprice xprice umount /data mkdir /home/xprice mount -a chown xprice:xprice /home/xprice chmod 750 /home/xprice usermod -m -d /home/xprice xprice cp /tmp/xprice/.* /home/xprice/ passwd xprice 或可尝试 groupadd -g 1100 xprice useradd -u 1101 -g 1100 -M xprice umount /data mkdir /home/xprice mount -a chown xprice:xprice /home/xprice chmod 750 /home/xprice usermod -d /home/xprice xprice passwd xprice 未验证如下tips http://blog.sina.com.cn/s/blog_8d778f9d0102wnmb.html ","date":"2021-03-09","objectID":"/mysite-public/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%94home%E7%9B%AE%E5%BD%95%E5%9C%A8%E5%AD%98%E5%82%A8%E4%B8%8A/:0:0","tags":null,"title":"新建用户且home目录在存储上","uri":"/mysite-public/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%94home%E7%9B%AE%E5%BD%95%E5%9C%A8%E5%AD%98%E5%82%A8%E4%B8%8A/"},{"categories":["Tech"],"content":"1、安装环境： 系统：CentOS Linux release 7.6.1810 (Core) Docker版本：18.09.8 2、下载离线安装包 docker 依赖包下载： containerd.io docker-ce-cli container-selinux 3、安装 rpm -ivh docker-ce-cli-18.09.8-3.el7.x86_64.rpm rpm -ivh container-selinux-2.107-3.el7.noarch.rpm rpm -ivh containerd.io-1.2.2-3.el7.x86_64.rpm rpm -ivh docker-ce-18.09.8-3.el7.x86_64.rpm ","date":"2021-03-09","objectID":"/mysite-public/centos7.6%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/:0:0","tags":null,"title":"Centos7.6离线安装docker","uri":"/mysite-public/centos7.6%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/"},{"categories":["Tech"],"content":" ##################################### ##################################### ####### YUM 使用方法 （仅redhat 6.2) ########## ##################################### ##################################### # 在客户机/etc/yum.repos.d/下面新建rhel-media.repo文件 # rhel-media.repo文件内容如下： [rhel-media] name=Red Hat Enterprise Linux 6.2 baseurl=http://1.1.1.1 #baseurl=file:///media/cdrom #/media/cdrom为光盘的mountpoint enabled=1 gpgcheck=0 #gpgkey=file:///media/rhel/RPM-GPG-KEY-redhat-release # 在命令行下 yum install 应用名 即可安装 ######################################### #####使用本地源############################# ####根据源的不同可分为两种情况 ########### 用光驱中的光盘做源 #第一步： mkdir /media/cdrom #第二步： mount /dev/sr0 /media/cdrom #第三步： 把rhel-media.repo文件中baseurl=http://1.1.1.1前加# #第四步： 把rhel-media.repo文件中#baseurl=file:///media/cdrom中的#删掉 ##########用系统ISO镜像文件做源 #第一步： mkdir /media/cdrom #第二步： mount -o loop /rhel-server-6.2-x86_64-dvd.iso /media/cdrom ### /rhel-server-6.2-x86_64-dvd.iso为ISO文件路径，根据实际情况更改 #第三步： 把rhel-media.repo文件中baseurl=http://1.1.1.1前加# #第四步： 把rhel-media.repo文件中#baseurl=file:///media/cdrom中的#删掉 ","date":"2021-03-09","objectID":"/mysite-public/yum%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/:0:0","tags":null,"title":"Yum源的使用方法","uri":"/mysite-public/yum%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"},{"categories":["Tech"],"content":"device-mapper 检查是否安装多路径软件包 device-mapper device-mapper-multipath rpm -qa |grep device-mapper 安装device-mapper, device-mapper-multipath yum install -y device-mapper device-mapper-multipath 生成多路径配置文件 mpathconf --enable 说明：生成配置文件是/etc/multipath.conf 修改配置文件 vim /etc/multipath.conf #blacklist { #devnode \"*\" #} defaults { user_friendly_names yes path_grouping_policy multibus failback immediate no_path_retry fail } 在默认配置下，LVM对所有磁盘进行扫描，以确定哪一块上面包含PV。如果使用了device-mapper-multipath或其他多路径软件如 EMC PowerPath 或Hitachi Dynamic Link Manager (HDLM)，那么对于每一个LUN的每一条路径就注册成为一个不同的SCSI设备。如/dev/sdb， /dev/sdc，等等。多路径软件之后会创建一个新的设备映射到这些路径如：/dev/mapper/mpath1 (device-mapper-multipath)， /dev/emcpowerb (EMC PowerPath)，或 /dev/sddlmab (HDLM)。由于每一个设备都指向同一个LUN，所以它们都包含相同的LVM元数据，因此在扫描时显示为duplicate。运行任何LVM命令，都会出现你所说的告警。 With a default configuration, LVM commands will scan for devices in /dev, and check every resulting device for LVM metadata. This is caused by the default filter in /etc/lvm/lvm.conf: 要确保LVM只扫描想要的多路径设备而不是单条路径，需要在/etc/lvm/lvm.conf文件中加上过滤条件，格式如下： filter = [ \"a/.*/\" ] 过滤语法接收多重条件。形式如 \"a\" \"\" (add) or \"r\" \"\" (remove)，中间以逗号为间隔。所有符合add条件的设备都会被扫描，同时忽略所有符合remove条件的设备。 注意：如果本地存储设备包含物理卷，确保除了多路径设备外，这些设备也包含在过滤条件中。 filter = [ \"a/emcpower.*/\",\"a/mpath.*/\",\"r/sd.*/\" ] 然后重新扫描一下确认所有设备都能被看见： #pvscan #vgscan 注意如果根文件系统位于逻辑卷上，确保上述扫描命令列出卷组中所有物理卷。如果没有列出，不要重启系统，直到过滤条件修改正确为止。 过滤条件修改好后，建议重新编译initrd以使所需设备在重启后能够自动扫描。 补充： 使用上述方法仍然没有解决问题，最终问题通过如下方法解决 1，修改了/etc/fstab 文件，文件系统为延时mount，也就是powerpath启动后在mount /dev/dbvg/lv_mysql /data ext3 _netdev 1 2 2，mysql最后再启动，防止文件系统没有mount就启动了 lrwxrwxrwx 1 root root 15 Mar 2 2013 S99mysql -\u003e ../init.d/mysql 启动multipath服务 modprobe dm-multipath /etc/init.d/multipathd start chkconfig multipathd on 查看磁盘 multipath -ll ","date":"2021-03-09","objectID":"/mysite-public/centos%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/:0:1","tags":null,"title":"Centos连接存储","uri":"/mysite-public/centos%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/"},{"categories":["Tech"],"content":"LVM配置 使用/dev/mapper/下带wwid的盘 不要用/dev/dm-0 之类的盘 dm-0…. 内部使用 创建vg,lv pvcreate /dev/mapper/360050768018207840000000000000000 pvcreate /dev/mapper/360050768018207840000000000000001 vgcreate vg_data /dev/mapper/360050768018207840000000000000000 /dev/mapper/360050768018207840000000000000001 lvcreate -L 600G -n lv_data vg_data mkfs.ext4 /dev/vg_data/lv_data mkdir /data chmod 755 /data mount /dev/vg_data/lv_data /data 开机自动挂载文件系统 /etc/fstab 文件添加如下内容 /dev/vg_data/lv_data /data auto defaults 0 0 调整LV大小 扩大LV lvextend -L +350G /dev/mapper/vg_data-lv_data 缩减lv lvreduce -L -20G /dev/mapper/vg_blade4linux-lv_home 调整文件系统大小 ext4 resize2fs /dev/mapper/lv_data-lv_data xfs xfs_growfs /dev/mapper/lv_data-lv_data 删除vg umount /u01 lvremove /dev/mapper/vg_data-lv_u01 vgs pvs pvremove /dev/sdb vgreduce vg_data /dev/sdb vgremove vg_data ","date":"2021-03-09","objectID":"/mysite-public/centos%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/:0:2","tags":null,"title":"Centos连接存储","uri":"/mysite-public/centos%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/"},{"categories":["Tech"],"content":"用nmon命令生成系统性能监控文件 为了查看系统在一段时间内的性能，我们可以借助系统自身提供的性能监控命令来生成一份性能监控日志，然后用nmon analyser小软件来生成图形化的监控界面. 在aix操作系统下，用root 用户执行如下命令： nmon -f -s 30 –c 2880 -m /tmp 系统每隔30秒，总共2880次监控性能，生成的文件存放在/tmp目录下。 topas 系统自动保存topas文件，可以转为csv文件，用nmon工具分析。文件在/etc/perf/daily目录下 topas文件可通过topasout -a xxxxx.topas 转化为csv文件 ","date":"2021-03-09","objectID":"/mysite-public/nmon%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6/:0:0","tags":null,"title":"Nmon生成系统性能监控文件","uri":"/mysite-public/nmon%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6/"},{"categories":["Tech"],"content":"AIX 6.1 TL 4开始，AIX系统提供了一个loopmount命令，可直接mount ISO文件 挂载点是目录，不要用建立的文件系统做挂载点 挂镜像文件: loopmount -i PowerHA6.1.iso -o \"-V cdrfs -o ro\" -m /mnt 挂光驱： mount -rv cdrfs /dev/cd0 /mnt AIX 6.1 TL4之前系统步骤示例如下： 一：建立一个和iso文件差不多大小的裸设备。 mklv -y is0_lv datavg 10 二：用dd命令把iso文件写到这个裸设备上， dd if=test_unix_mount_iso.iso of=/dev/iso_lv bs=10M 三：mount mount -rv cdrfs /dev/iso_lv /mnt 这样，在mnt下就是iso文件的内容了。 ","date":"2021-03-09","objectID":"/mysite-public/aix%E6%8C%82%E8%BD%BD%E5%85%89%E7%9B%98%E9%95%9C%E5%83%8F/:0:0","tags":null,"title":"Aix挂载光盘镜像","uri":"/mysite-public/aix%E6%8C%82%E8%BD%BD%E5%85%89%E7%9B%98%E9%95%9C%E5%83%8F/"},{"categories":["Tools"],"content":"硬件配置 配件 型号 价格 散热 海盗船h60 378.9 电源 海盗船sf600 698.9 机箱 追风者217e 700 主板 华硕rog z390i 1869 显示器 dell2419 1498.5 硬盘 三星970evo500g 879 硅脂 猫头鹰nt-h1 18.9 cpu 9700k Coffee Lake Refresh 630核显 FCLGA1151 2459 无线网卡 dell dw1560（bcm94352z） 185 内存 USCORSAIR 32GB(16x2) DDR4 3200 复仇者LPX系列 键盘 高斯 GS87D 鼠标 Apple Trackpad 2 ","date":"2021-03-04","objectID":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/:0:1","tags":null,"title":"Asus Z390i 9700k Hackintosh With OpenCore","uri":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/"},{"categories":["Tools"],"content":"参考文档 OpenCore Install Guide Getting Started With ACPI Wireless Buyers Guide 一键生成黑苹果 OpenCore EFI 文件OC.Gen-X ","date":"2021-03-04","objectID":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/:0:2","tags":null,"title":"Asus Z390i 9700k Hackintosh With OpenCore","uri":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/"},{"categories":["Tools"],"content":"工具准备 硬件 方案一: OpenCore boot Manager 与macOS 安装U盘分离 U盘1 : 16GB或以上容量,用于创建macOS安装U盘 U盘2 : 4GB或以上容量，用于安装OpenCore boot Manager OpenCore boot Manager与macOS 系统分离优点 可以单独升级OpenCore boot Manager 用Apple推荐的方法创建macOS启动盘(没有任何第三方bootloaders),此U盘还可以用于安装升级白苹果. 安装完成后，OpenCore boot Manager U盘也会成为永久的启动U盘.(也可以把EFI文件拷贝到硬盘的EFI分区，从硬盘启动) 当选择从OpenCore boot Manager U盘启动后, Clover/OC should display one more option (Install macOS from the other USB) 方案二：OpenCore boot Manager与macOS 安装U盘合二为一 需一个U盘 : 16GB或以上容量,用于创建OpenCore boot manager及macOS安装U盘 One flash drive is always sufficient, you can format it using Disk Utility choosing Mac OS Extended (journal) with a GUID boot partition. It adds a UEFI partition you can mount, and then copy and paste EFI folder there. 软件 OC Gen X :用于生成基础EFI文件 ProperTree :用于修改config.plist文件及加载SSDT ProperTree修改config.plist方法参考：OpenCore Install Guide \u003e USB Creation \u003e config.plist Setup 章节 ","date":"2021-03-04","objectID":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/:0:3","tags":null,"title":"Asus Z390i 9700k Hackintosh With OpenCore","uri":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/"},{"categories":["Tools"],"content":"安装步骤 BIOS设置 设置内容 参考 OpenCore Install Guide文档的Configs \u003e Coffee Lake \u003e Intel BIOS settings章节 Disable Fast Boot Secure Boot Serial/COM Port Parallel Port VT-d (can be enabled if you set DisableIoMapper to YES) CSM Thunderbolt(For initial install, as Thunderbolt can cause issues if not setup correctly) Intel SGX Intel Platform Trust CFG Lock (MSR 0xE2 write protection) (This must be off, if you can’t find the option then enable AppleXcpmCfgLock under Kernel -\u003e Quirks. Your hack will not boot with CFG-Lock enabled) Enable VT-x Above 4G decoding Advanced Items \u003e System Agent (SA) Configuration \u003e Above 4G Decoding \u003e Enable Hyper-Threading Execute Disable Bit EHCI/XHCI Hand-off Advanced Items \u003e USB Configuration \u003e XHCI Hand Off \u003e Enabled OS type: Windows 8.1/10 UEFI Mode DVMT Pre-Allocated(iGPU Memory): 64MB Advanced Items \u003e System Agent (SA) Graphics Configuration \u003e DVMT Pre-Allocated \u003e 64 SATA Mode: AHCI 设置方法 1. Plug your monitor into your video cards DisplayPort to avoid graphics issues. You can use HDMI if it's all you have 2. Start your machine and use 1 of these methods to get onto BIOS during boot: a) Rapidly tap the delete key b) Rapidly tap the F2 key (some keyboards may need to have the Function key held down) c) Press and hold the Function key while rapidly tapping the Backspace key?? 3. Check the BIOS version and update it if it is not the latest one 4. If you have previously set your BIOS, it would be best to do a CMOS reset by shorting the 2 pins on the front left corner of your motherboard. Please se instructions for complete details 5. In the main screen middle left, set X.M.P. to Enabled 6. Advanced Items \u003e CPU Configuration \u003e Intel (VMX) Virtualization Technology \u003e Enable - Absolutely required for Parallels 7. Advanced Items \u003e System Agent (SA) Graphics Configuration \u003e Primary Display \u003e PEG for DGPU, CPU for IGPU 8. Advanced Items \u003e System Agent (SA) Graphics Configuration \u003e IGPU Multi-Monitor \u003e Enabled for DGPU, Disabled for IGPU 9. Save and reboot to activate the RC6 and DVMT settings 10. Advanced Items \u003e System Agent (SA) Graphics Configuration \u003e RC6(Render Standby) \u003e Off - This settings disables a power saving feature that could potentially crash the system 13. Advanced Items \u003e USB Configuration \u003e Legacy USB Support \u003e Disabled 15. Boot Menu \u003e Boot Option 1 \u003e UEFI USB installer drive (or whatever you named it, UEFI will be automatically prepended) 16. Exit \u003e Save Changes There are few things you can tweak to eliminate ugly boot graphics and make BIOS menus easier to navigate: 17. Boot \u003e Boot Configuration \u003e Boot Logo Display \u003e Disabled 18. Boot \u003e Boot Configuration \u003e Post Report \u003e 1 Sec 19. Boot \u003e Setup Mode \u003e Advanced I love this next feature because it allows you to save your BIOS settings so you can play around without having to wipe them and start over. 20. Tools \u003e Asus User Profile \u003e Profile Name \u003e OSX (or whatever you like) 21. Tools \u003e Asus User Profile \u003e Save to Profile \u003e 1 (hit enter to save) 创建macOS安装U盘 参考Apple官方文档: How to create a bootable installer for macOS EFI准备 最终的EFI已上传到Github SSDT准备 通用SSDT 参考Getting Started With ACPI 直接从OpenCorePkg项目下载 定制USB 使用网上Z390-i定制好的SSDT-UIAC.aml 使用 OC Gen X 生成基础EFI文件 需要的Firmware Drivers \u0026 Kexts \u0026 SSDTS参考OpenCore Install Guide \u003e USB Creation \u003e Gathering files 配置如下： System Type : Coffee Lake Kext \u003e Essential : Lilu \u0026 VirtualSMC Kext \u003e VirtualSMC Plugins : SMCProcessor \u0026 SMCSuperIO Kext \u003e Graphics : WhateverGreen Kext \u003e Audio : AppleALC Kext \u003e Ethernet : InteMausi Kext \u003e USB : USBInjectAll Kext \u003e WiFI and Bluetooth : AirportBrcmFixup \u0026 BrcmPatchRAM3 \u0026 BrcmBluetoothInjector \u0026 BrcmFiremwareData Kext \u003e Extra’s : Null Firmware Drivers \u003e UEFI : OpenRuntime.efi \u0026 HfsPlus.efi SMBIOS \u003e System Model : iMac19.1 添加SSDT并修改config.plist 把SSDT文件拷贝到EFI/OC/ACPI目录下 运行ProperTree,打开EFI/OC/config.plist文件. config.plist文件打开后, 按Cmd/Ctrl + Shift + R 快捷键,然后选中 EFI/OC 文件夹,用来Clean Snapshot This will remove all the entries from the config.plist and then adds all your SSDTs, Kexts and Firmware drivers to the","date":"2021-03-04","objectID":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/:0:4","tags":null,"title":"Asus Z390i 9700k Hackintosh With OpenCore","uri":"/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/"},{"categories":["Tech"],"content":"在unix linux 系统中，系统通过uid 识别用户。 root 用户uid=0 gid=0，root用户是唯一的。 若其他用户与root用户uid,gid相同，就会有root权限。 下面根据操作系统不同，举例说明如何建立特权用户。 ","date":"2021-03-04","objectID":"/mysite-public/linux%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7/:0:0","tags":null,"title":"Linux添加特权用户","uri":"/mysite-public/linux%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7/"},{"categories":["Tech"],"content":"Redhat Linux： 实验如下： [root@localhost ~]# id root uid=0(root) gid=0(root) 组=0(root) [root@localhost ~]# [root@localhost ~]# cat /etc/passwd root❌0:0:root:/root:/bin/bash bin❌1:1:bin:/bin:/sbin/nologin daemon❌2:2:daemon:/sbin:/sbin/nologin adm❌3:4:adm:/var/adm:/sbin/nologin lp❌4:7:lp:/var/spool/lpd:/sbin/nologin sync❌5:0:sync:/sbin:/bin/sync shutdown❌6:0:shutdown:/sbin:/sbin/shutdown halt❌7:0:halt:/sbin:/sbin/halt mail❌8:12:mail:/var/spool/mail:/sbin/nologin uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin operator❌11:0:operator:/root:/sbin/nologin games❌12💯games:/usr/games:/sbin/nologin gopher❌13:30:gopher:/var/gopher:/sbin/nologin ftp❌14:50:FTP User:/var/ftp:/sbin/nologin nobody❌99:99:Nobody:/:/sbin/nologin dbus❌81:81:System message bus:/:/sbin/nologin usbmuxd❌113:113:usbmuxd user:/:/sbin/nologin rpc❌32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin oprofile❌16:16:Special user account to be used by OProfile:/home/oprofile:/sbin/nologin vcsa❌69:69:virtual console memory owner:/dev:/sbin/nologin rtkit❌499:497:RealtimeKit:/proc:/sbin/nologin abrt❌173:173::/etc/abrt:/sbin/nologin hsqldb❌96:96::/var/lib/hsqldb:/sbin/nologin avahi-autoipd❌170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin saslauth❌498:76:\"Saslauthd user\":/var/empty/saslauth:/sbin/nologin rpcuser❌29:29:RPC Service User:/var/lib/nfs:/sbin/nologin nfsnobody❌65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin postfix❌89:89::/var/spool/postfix:/sbin/nologin haldaemon❌68:68:HAL daemon:/:/sbin/nologin gdm❌42:42::/var/lib/gdm:/sbin/nologin ntp❌38:38::/etc/ntp:/sbin/nologin apache❌48:48:Apache:/var/www:/sbin/nologin radvd❌75:75:radvd user:/:/sbin/nologin qemu❌107:107:qemu user:/:/sbin/nologin pulse❌497:495:PulseAudio System Daemon:/var/run/pulse:/sbin/nologin sshd❌74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin tcpdump❌72:72::/:/sbin/nologin weblogic❌500:500::/home/weblogic:/bin/bash [root@localhost ~]# [root@localhost ~]# [root@localhost ~]# useradd -u 0 -g 0 test uservi useradd: UID 0 is not unique [root@localhost ~]# [root@localhost ~]# [root@localhost ~]# useradd -o -u 0 -g 0 testuser [root@localhost ~]# [root@localhost ~]# cat /etc/passwd root❌0:0:root:/root:/bin/bash bin❌1:1:bin:/bin:/sbin/nologin daemon❌2:2:daemon:/sbin:/sbin/nologin adm❌3:4:adm:/var/adm:/sbin/nologin lp❌4:7:lp:/var/spool/lpd:/sbin/nologin sync❌5:0:sync:/sbin:/bin/sync shutdown❌6:0:shutdown:/sbin:/sbin/shutdown halt❌7:0:halt:/sbin:/sbin/halt mail❌8:12:mail:/var/spool/mail:/sbin/nologin uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin operator❌11:0:operator:/root:/sbin/nologin games❌12💯games:/usr/games:/sbin/nologin gopher❌13:30:gopher:/var/gopher:/sbin/nologin ftp❌14:50:FTP User:/var/ftp:/sbin/nologin nobody❌99:99:Nobody:/:/sbin/nologin dbus❌81:81:System message bus:/:/sbin/nologin usbmuxd❌113:113:usbmuxd user:/:/sbin/nologin rpc❌32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin oprofile❌16:16:Special user account to be used by OProfile:/home/oprofile:/sbin/nologin vcsa❌69:69:virtual console memory owner:/dev:/sbin/nologin rtkit❌499:497:RealtimeKit:/proc:/sbin/nologin abrt❌173:173::/etc/abrt:/sbin/nologin hsqldb❌96:96::/var/lib/hsqldb:/sbin/nologin avahi-autoipd❌170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin saslauth❌498:76:\"Saslauthd user\":/var/empty/saslauth:/sbin/nologin rpcuser❌29:29:RPC Service User:/var/lib/nfs:/sbin/nologin nfsnobody❌65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin postfix❌89:89::/var/spool/postfix:/sbin/nologin haldaemon❌68:68:HAL daemon:/:/sbin/nologin gdm❌42:42::/var/lib/gdm:/sbin/nologin ntp❌38:38::/etc/ntp:/sbin/nologin apache❌48:48:Apache:/var/www:/sbin/nologin radvd❌75:75:radvd user:/:/sbin/nologin qemu❌107:107:qemu user:/:/sbin/nologin pulse❌497:495:PulseAudio System Daemon:/var/run/pulse:/sbin/nologin sshd❌74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin tcpdump❌72:72::/:/sbin/nologin weblogic❌500:500::/home/weblogic:/bin/bash testuser❌0:0::/home/testuser:/bin/bash [root@localhost ~]# [root@localhost ","date":"2021-03-04","objectID":"/mysite-public/linux%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7/:0:1","tags":null,"title":"Linux添加特权用户","uri":"/mysite-public/linux%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7/"},{"categories":["Tech"],"content":"1.1.1.1主机名porxy 1.1.1.9主机名app2 1.生成及验证密钥 Linux keygen设置 Linux默认密钥在/root/.ssh/id_rsa ssh-keygen -t rsa -P '' -f /root/.ssh/id_rsa 测试本机免秘钥登录 Linux受信任的主机秘钥在 /root/.ssh/authorized_keys [root@porxy .ssh]# ls id_rsa id_rsa.pub [root@porxy .ssh]# cat /root/.ssh/id_rsa.pub \u003e\u003eauthorized_keys [root@porxy .ssh]# ls -al 总用量 16 drwx------ 2 root root 58 11月 1 15:48 . dr-xr-x---. 16 root root 4096 11月 1 15:36 .. -rw-r--r-- 1 root root 392 11月 1 15:48 authorized_keys -rw------- 1 root root 1679 11月 1 15:36 id_rsa -rw-r--r-- 1 root root 392 11月 1 15:36 id_rsa.pub [root@porxy .ssh]# chmod 600 authorized_keys [root@porxy .ssh]# ls -al 总用量 16 drwx------ 2 root root 58 11月 1 15:48 . dr-xr-x---. 16 root root 4096 11月 1 15:36 .. -rw------- 1 root root 392 11月 1 15:48 authorized_keys -rw------- 1 root root 1679 11月 1 15:36 id_rsa -rw-r--r-- 1 root root 392 11月 1 15:36 id_rsa.pub [root@porxy .ssh]# [root@porxy .ssh]# [root@porxy .ssh]# ssh 127.0.0.1 The authenticity of host '127.0.0.1 (127.0.0.1)' can't be established. ECDSA key fingerprint is 32:fe:bf:34:76:32:b1:e7:49:d3:f7:0c:04:d8:d4:e3. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '127.0.0.1' (ECDSA) to the list of known hosts. Last login: Wed Nov 1 14:43:26 2017 from 10.192.43.98 [root@porxy ~]# [root@porxy ~]# exit 登出 Connection to 127.0.0.1 closed. [root@porxy .ssh]# [root@porxy .ssh]# [root@porxy .ssh]# 可以免秘钥登录了 第一次登录会把ECDSA登记到known hosts文件里 [root@porxy .ssh]# ls -al 总用量 20 drwx------ 2 root root 76 11月 1 15:51 . dr-xr-x---. 16 root root 4096 11月 1 15:36 .. -rw------- 1 root root 392 11月 1 15:48 authorized_keys -rw------- 1 root root 1679 11月 1 15:36 id_rsa -rw-r--r-- 1 root root 392 11月 1 15:36 id_rsa.pub -rw-r--r-- 1 root root 171 11月 1 15:51 known_hosts [root@porxy .ssh]# [root@porxy .ssh]# 可以发现/root/.ssh下多了一个known hosts文件 2.用ssh-copy-id将公钥复制到远程机器中 ssh-copy-id -i /root/.ssh/id_rsa.pub 1.1.1.9 可以发现远程机器1.1.1.9 上/root/.ssh下多了一个文件authorized_keys [root@app2 .ssh]# ls -al 总用量 8 drwx------ 2 root root 28 11月 1 16:12 . dr-xr-x---. 16 root root 4096 11月 1 16:11 .. -rw------- 1 root root 392 11月 1 16:12 authorized_keys [root@app2 .ssh]# [root@app2 .ssh]# cat authorized_keys ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFor6qtI7TzYM0TOju3w8EMiyilxJwvYX5s3hYykYaixV2Vhh31g+CdF/E/1kQYZW5oC/gnhSD13sjK87Hymyb1RDGLvUyFgDRIhCRzlNmdE187EiMtch7JLVmb00BXhSEIK7JozGhcy+b/FEHP5zUuVp8RCftZBLRGOqoG1S799bdlujaFIX/zTNHu/SogsYqu/IPilZPrYK3JmG5+KxiixDdTY13soWOF57qVf9CCpR32nkZ7JeIKGA/uhOlnrnEWezQcU4TfRCitJaAZu9uQbbOE/HOlb9apT8JcvxbqwEGcoVUM+COI84Hk95rVamwuc4pgQL6rYHFqqYq4YO7 root@porxy [root@app2 .ssh]# 3.验证免密钥登录 [root@porxy .ssh]# ssh 1.1.1.9 Last login: Wed Nov 1 16:16:36 2017 from 1.1.1.1 [root@app2 ~]# ","date":"2021-03-04","objectID":"/mysite-public/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/:0:0","tags":null,"title":"SSH免密登录","uri":"/mysite-public/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"},{"categories":["Tech"],"content":"方法一：Autologin脚本 适用于密码为一组密码中的某一个 cat /usr/local/bin/Autologin #!/usr/bin/expect -f ########################################################## # 通过SSH登陆和执行命令 #参数:1.LoginUser # 2.RemoteServerIp #返回值： # 0 成功 # 1 参数个数不正确 # 2 SSH 服务器服务没有打开 # 3 SSH 用户密码不正确 # 4 连接SSH服务器超时 # 5 Unexpected Error ########################################################## set PassNumber 0 set passwords {123 abc root} set timeout 20 set TryAgain 1 set ok_string LOGIN_SUCCESS set RemoteServerIp [lindex $argv 0] while {$TryAgain == 1} { spawn ssh -l root ${RemoteServerIp} expect { -nocase -re \"yes/no\" { send -- \"yes\\n\" exp_continue } -nocase -re \"assword: \" { if { $PassNumber \u003e= [llength $passwords] } { send_error \"wrong passwords\\n\" set CheckLoginState 0 exit 3 } set TryWhich [expr $PassNumber + 1] send [lindex $passwords $PassNumber]\\r send_user \"\\nTry Password $TryWhich ...\" set CheckLoginState 1 incr PassNumber } -nocase -re \"Connection refused\" { send_error \"SSH services at ${RemoteServerIp} is not active.\\n\" exit 2 } -nocase -re \"ssh_exchange_identification: Connection closed by remote host\" { #set PassNumber [expr $PassNumber - 1] sleep 5 } timeout { send_error \"Connect to SSH server root@${RemoteServerIp} timeout.\\n\" exit 4 } eof { send_error \"Unexpected Error\\n\" exit 5 } } #######check login state######## if {$CheckLoginState==1} { expect { -nocase -re \"try again\" { send_error \"\\nPassword $TryWhich Error.\\n\\n\" } -nocase -re \"assword:\" { send_error \"Password $TryWhich Error.\\n\\n\" } -nocase -re \"ssh_exchange_identification: Connection closed by remote host\" { send_error \"Connection closed by remote host.\\n\\n\" } -nocase -re \"Last login: \" { set TryAgain 0 interact } eof {} } } #-nocase -re \"No such user\" { # send_error \"No such user.\\n\" # exit 5 # } #exit } 根据实际情况替换脚本第15行中123 abc root等密码 方法二： gansible工具 速度更快，功能更强大 详见gansible项目主页 ","date":"2021-03-04","objectID":"/mysite-public/%E8%87%AA%E5%8A%A8%E5%B0%9D%E8%AF%95%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":null,"title":"自动尝试密码登录服务器","uri":"/mysite-public/%E8%87%AA%E5%8A%A8%E5%B0%9D%E8%AF%95%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":["Tech"],"content":" cp /etc/sysctl.conf /etc/sysctl.conf.bak vim /etc/sysctl.conf net.ipv4.tcp_tw_reuse = 1 net.ipv4.tcp_fin_timeout = 30 net.ipv4.ip_local_port_range = 1024 65000 net.ipv4.tcp_max_tw_buckets = 45000 sysctl -p /etc/sysctl.conf sysctl -w net.ipv4.route.flush=1 sysctl -a |grep net.ipv4.tcp_tw_reuse sysctl -a |grep net.ipv4.tcp_fin_timeout sysctl -a |grep net.ipv4.tcp_max_tw_buckets sysctl -a |grep net.ipv4.ip_local_port_range cp /etc/security/limits.conf /etc/security/limits.conf.bak vim /etc/securiy/limits.conf soft nofile 65530 hard nofile 65530 ","date":"2021-03-04","objectID":"/mysite-public/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8tcp%E7%AD%89%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/:0:0","tags":null,"title":"高并发应用TCP等参数优化","uri":"/mysite-public/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%BA%94%E7%94%A8tcp%E7%AD%89%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/"},{"categories":["Tech"],"content":"变量嵌套 [root@renccblj ~]# a=b [root@renccblj ~]# c=a [root@renccblj ~]# echo ${!c} b [root@renccblj ~]# [root@renccblj ~]# eval echo $\"${c}\" a [root@renccblj ~]# Aix下只能用 eval 算术精度 取小数点后两位 [root@renccblj ~]# echo \"scale=2; 5/3 \" | bc 1.66 [root@renccblj ~]# [root@renccblj ~]# echo \"scale=2; 1/3 \" | bc .33 [root@renccblj ~]# 发现零点几前面的0不显示，解决方法如下 http://www.361way.com/linux-bc-point-zero/4960.html #!/bin/bash #方法1 res1=$(printf \"%.2f\" `echo \"scale=2;1/3\"|bc`) res2=$(printf \"%.2f\" `echo \"scale=2;5/3\"|bc`) #方法2 #v=$(echo $big $small | awk '{ printf \"%0.2f\\n\" ,$1/$2}') v1=$(echo 1 3 | awk '{ printf \"%0.2f\\n\" ,$1/$2}') v2=$(echo 5 3 | awk '{ printf \"%0.2f\\n\" ,$1/$2}') #方法3 mem1=`echo \"scale=2; a=1/3; if (length(a)==scale(a)) print 0;print a \"|bc` mem2=`echo \"scale=2; a=5/3; if (length(a)==scale(a)) print 0;print a \"|bc` echo res1 is $res1 echo res2 is $res2 echo v1 is $v1 echo v2 is $v2 echo mem1 is $mem1 echo mem2 is $mem2 三种方法我们可以看到，方法1、方法3对小数点后面的值不会四舍五入，而方法2(awk)方法使用printf 时会对小数点（浮点运算）的值四舍五入进位。所以浮点运行时还是建议使用awk处理。不过在取整数时，awk默认也是不会四舍五入的。 tail tail命令语法为： tail [ -f ] [ -c Number | -n Number | -m Number | -b Number | -k Number ] [ File ] To Display Lines in Reverse Order tail [ -r ] [ -n Number ] [ File ] tail 命令从指定点开始将文件写到标准输出. number变量指定多少units写到标准输出。注意是units，不是行。 number的值可以是 positive or negative integer。如果值是+n,从文件开始算起，第n个units及以后的内容将被输出到标准输出。如果值是-n,从文件结尾算起，第n个units及以后的内容将被输出到标准输出。如果值是n，不带+或—，等同于-n。 如果加-n 参数，则units为行。 如果没有加任何参数，tail将读取文件最后10行并写到标准输出，相当于tail -n 10 ","date":"2021-03-04","objectID":"/mysite-public/shell%E5%AD%A6%E4%B9%A0/:0:0","tags":null,"title":"Shell学习","uri":"/mysite-public/shell%E5%AD%A6%E4%B9%A0/"},{"categories":["Tools"],"content":" [root@192 conf]# cat aria2.sh #mkdir -p ~/aria2/conf #cd ~/aria2/conf #touch aria2.conf #touch aria2.session #touch aria2.session #touch dht.dat #touch dht6.dat docker run -d \\ --name aria2-with-webui \\ -p 6800:6800 \\ -p 6880:80 \\ -v /data/Downloads:/data \\ -v ~/aria2/conf:/conf \\ -e PGID=0 \\ -e PUID=0 \\ abcminiuser/docker-aria2-with-webui:latest-ng [root@192 conf]# cat aria2.conf dir=/data input-file=/conf/aria2.session save-session=/conf/aria2.session ave-session-interval=60 file-allocation=trunc log-level=warn enable-http-pipelining=true max-concurrent-downloads=10 max-connection-per-server=10 min-split-size=10M split=10 continue=true max-overall-download-limit=0 max-overall-upload-limit=1K enable-dht=true enable-dht6=true dht-file-path=/conf/dht.dat dht-file-path6=/conf/dht6.dat bt-seed-unverified=true bt-save-metadata=true bt-max-open-files=16 bt-enable-lpd=true bt-remove-unselected-file=true follow-torrent=true peer-id-prefix=-TR2770- user-agent=Transmission/2.77 enable-rpc=true rpc-listen-all=true rpc-allow-origin-all=true rpc-listen-port=6800 bt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.open-internet.nl:6969/announce,udp://tracker.leechers-paradise.org:6969/announce,udp://exodus.desync.com:6969/announce,udp://tracker.internetwarriors.net:1337/announce,udp://9.rarbg.to:2710/announce,udp://9.rarbg.me:2710/announce,http://tracker1.itzmx.com:8080/announce,udp://open.demonii.si:1337/announce,udp://tracker.torrent.eu.org:451/announce,udp://tracker.tiny-vps.com:6969/announce,udp://tracker.cyberia.is:6969/announce,udp://thetracker.org:80/announce,udp://denis.stalker.upeer.me:6969/announce,udp://bt.xxx-tracker.com:2710/announce,udp://open.stealth.si:80/announce,udp://tracker.port443.xyz:6969/announce,udp://ipv4.tracker.harry.lu:80/announce,http://open.acgnxtracker.com:80/announce,udp://explodie.org:6969/announce [root@192 conf]# ","date":"2021-03-03","objectID":"/mysite-public/aria2-on-docker/:0:0","tags":null,"title":"Aria2 on Docker","uri":"/mysite-public/aria2-on-docker/"},{"categories":["Device"],"content":"https://weibo.com/tv/v/IhQSsEBsS?fid=1034:4442542427565493 无线打印机直连打印方法 https://v.youku.com/v_show/id_XMzc1MzY4MzA0MA==.html?spm=a2hzp.8244740.0.0 长按打印机的叉还有WiFi键 电源灯闪烁松手哈 然后手机直接连接打印机的WiFi哈 然后打开手机设置找到wifi名字是DE和Hp的名字的wifi密码是12345678 网络 无线（80211） 无线设置向导 ","date":"2021-03-03","objectID":"/mysite-public/hp3636%E6%89%93%E5%8D%B0%E6%9C%BA%E8%AE%BE%E7%BD%AE/:0:0","tags":null,"title":"HP3636打印机设置","uri":"/mysite-public/hp3636%E6%89%93%E5%8D%B0%E6%9C%BA%E8%AE%BE%E7%BD%AE/"},{"categories":["Tools"],"content":" docker run -d --restart=always --net=host --privileged --name plex -h rencc -v /Users/rencc/Plex:/config -v /Users/rencc/Downloads:/data -p 32400:32400 -e PUID=501 -e PGID=20 -e TZ=Asia/Shanghai linuxserver/plex ","date":"2021-03-03","objectID":"/mysite-public/plex-on-docker/:0:0","tags":null,"title":"Plex on Docker","uri":"/mysite-public/plex-on-docker/"},{"categories":["Tools"],"content":"OS: Redhat 7.6 ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:0","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Tools"],"content":"0：Docker 安装 需要如下4个安装包。（container-selinux取代老版本docker-selinux） docker-ce-18.09.0-3.el7.x86_64.rpm containerd.io-1.2.0-3.el7.x86_64.rpm docker-ce-cli-18.09.0-3.el7.x86_64.rpm container-selinux-2.74-1.el7.noarch.rpm ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:1","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Tools"],"content":"1.gitlab 镜像准备 外网下载镜像 docker save -o gitlab.tar gitlab:latest docker load -i gitlab.tar ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:2","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Tools"],"content":"2.建gitlab用户 ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:3","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Tools"],"content":"3.持久化存储准备 准备存储挂载到/data下。 新建gitlab/config gitlab/logs gitlab/data三个文件夹 ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:4","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Tools"],"content":"4.gitlab用户启动容器 sudo docker run --detach \\ --hostname gitlab.XXXXXX.cn \\ --publish 443:443 --publish 80:80 --publish 2222:22 \\ --name gitlab \\ --restart always \\ --volume /data/gitlab/config:/etc/gitlab \\ --volume /data/gitlab/logs:/var/log/gitlab \\ --volume /data/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:latest 注意 把官方文档中映射的端口修改一下，解决22端口冲突 –publish 443:443 –publish 80:80 –publish 22:22 \\ 改为 –publish 443:443 –publish 80:80 –publish 2222:22 \\ ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:5","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Tools"],"content":"5.修改gitlab.rb（data/gitlab/config下）相关端口号为2222 gitlab_rails[‘gitlab_shell_ssh_port’] = 2222 ","date":"2021-03-03","objectID":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/:0:6","tags":null,"title":"Gitlab容器化部署","uri":"/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"},{"categories":["Live"],"content":"随心所欲，不受任何限制，包括，金钱，地理位置，气候条件，地形等等，任何条件都能满足 北纬18度左右（阳光充足，气候适宜），半山（海拔高，不会太热，冬天也不能太冷），前面后湖或海，背山面水。 地上两层，地下一层，地下室下面还有个避难逃生室。 双首层设计，层层退台设计 无边际泳池 每卧都带卫生间，主卧带衣帽间，书房 高层高 带电梯 功能设计 负二层：避难层 负一层：影院，车库，酒窖，设备间 一层：客厅，中餐厅，西餐厅，中厨，西厨，书房，俩老人房，一客房，公卫 二层：小客厅，简单西厨，主卧，三卧室 ","date":"2021-03-03","objectID":"/mysite-public/%E7%90%86%E6%83%B3%E7%9A%84%E4%BD%8F%E5%AE%85/:0:0","tags":null,"title":"理想的住宅","uri":"/mysite-public/%E7%90%86%E6%83%B3%E7%9A%84%E4%BD%8F%E5%AE%85/"},{"categories":["Live"],"content":" http://www.chiphell.com/thread-1340339-1-1.html至少全6分管，末端4分 水压3,5 左热右冷 热水循环 热水管有保温棉 卫生间的地板一定要做好倾斜度，我当初马桶装好后感觉有点歪，水泥没干回压了下，结果造成积水。 过门石纯水泥 装修之前一定先检查各下水道是否堵塞，我家厨房下水被堵，结果按照完橱柜才发现，只好锯掉。 大面积封阳台以后尽量避免大面积使用推拉窗,虽然推拉窗看上去效果很好,实际上是用起来并没有推开窗效果好,特别是高层又有大风雨的情况,至少也应该推拉,推开,气窗三者均衡应用...另外推拉窗用的纱窗似乎基本是摆设...完全不防蚊虫。 客厅电视机墙里的管子太细，色差线+音频线（机顶盒）、HDIM线（电脑）、音视频线（预穿没用）就已经满满的了。现在想想HDIM线应该至少2根，留一根给蓝光或者高清播放器或者坏了备用。 电视墙后面的背管必须用大口径的管子，不然就会悲剧。 窗帘导轨别装得太靠近窗口了，装了上下推拉的纱窗之后，推拉纱窗的时候直接磨窗帘，拉窗帘的时候直接磨纱窗，掉毛。 如果装防盗网，一定要考虑好空调外机如何安装、维护。 书房的桌子尽量做大，参考1.8×0.8的尺寸。 ","date":"2021-03-03","objectID":"/mysite-public/%E7%83%AD%E6%B0%B4%E5%BE%AA%E7%8E%AF/:0:0","tags":null,"title":"热水循环","uri":"/mysite-public/%E7%83%AD%E6%B0%B4%E5%BE%AA%E7%8E%AF/"},{"categories":["Live"],"content":"强电箱配置 http://post.smzdm.com/p/75172/ http://www.chiphell.com/thread-1358982-1-1.html http://www.chiphell.com/thread-1339180-1-4.html http://www.chiphell.com/thread-1338417-1-4.html http://www.chiphell.com/thread-1265501-1-10.html http://www.chiphell.com/thread-1313120-1-9.html http://www.chiphell.com/thread-1321814-1-8.html http://www.chiphell.com/thread-1268929-1-8.html http://www.chiphell.com/thread-1321847-2-5.html http://www.chiphell.com/thread-1340552-1-5.html http://www.chiphell.com/thread-1340264-1-5.html http://www.chiphell.com/thread-1040552-3-1.html 低压断路器产品 http://www.chiphell.com/thread-1354102-1-1.html http://www.chiphell.com/thread-1040552-1-1.html 110v 电路http://www.chiphell.com/thread-1342031-1-3.html 家庭强电箱的配置大体有以下三种： 方案1、总开漏电空开 + 支路普通空开（最省钱！）： 家庭总开关+漏电保护，然后下面是一堆的支路普通空开，这应该是家庭最常见的回路开关选型了。既然最普遍，那必然有它存在的理由啊，那就是省钱！整个布置方案只有一个漏电保护，的确是最省钱的，但是这个方案的缺点也显而易见，一旦有人在家里的插座插了一个漏电的电器，那么必然会跳掉全屋的总闸。要是天黑的话，那么就等着摸黑去配电箱那里一路路地试验那个回路漏电了，的确也是很苦逼的事情！ 方案2、总开开关 + 部分支路漏电空开（最均衡！）： 总开开关 + 部分支路漏电空开，就是总开关使用普通的2P的空开，部分支路，就是涉及插座的支路使用漏电开关，空调和照明回路由于是固定安装，一般漏电可能较小（卫生间的照明除外！），这样插座什么的漏电就只会跳开自己所在回路的空开，不会让全屋停电！但也有缺点，就是空调和照明回路没有漏电保护，万一，我是说万一漏电就不好玩了！ 方案3、总开开关 + 全部支路漏电空开（保护性能最好，土豪速度上！）： 总开开关 + 全部支路漏电空开，就是总开关使用普通的2P的空开，全部的支路都使用漏电开关。这样的配置可以提供最好的漏电保护性能，任何一回路漏电都会跳开，不会影响其他回路！但是由于全部的支路都使用漏电空开，价钱也很贵！土豪当我什么也没有说就好！空开、漏保及回路布置 土豪我们做朋友吧：） 按照CHH的土豪们的想法，应该都是第3种配置的吧，但是全部的漏电保护，我觉得在强电箱处花费比较大，为了那支路保护花费太多的钱也不合算，于是混合了1、2、3种方案，折中出一种不那么费钱的方案，但是又提供足够漏电保护性能。 首先是2P总开关，然后每几个1P+N的开关就带一个2P的漏电保护，我具体一点来说吧，以我自己的4房2厅2卫2阳台1入户花园1厨房来说明： 1、全屋2P63A总开关 + 过欠压保护 + 防浪涌保护 （后面这两个是CHH标配，我顺便写上） 2、2P63A的漏电保护 + 很多个1P+N的空开，每个空开负责一个区域的供电或者单独一个大功率电器的供电。具体是2P63A漏电保护、4个1P+N空开负责4个房间的照明和插 座、4个1P+N空开负责4个房间的空调。此处其实可以节省空调的4个开关合并到照明和插座里面的，因为空调挂机的功率其实不大。 3、2P63A的漏电保护+很多个1P+N的空开。具体是2P63A漏电保护、6个1P+N空开分别负责2厅2阳台1入户花园1厨房 4、2P63A的漏电保护+很多个1P+N的空开。具体是2P63A漏电保护、2个1P+N空开分别负责2个卫生间。因为这个最容易发生漏电，所以单独出来吧 这样的强电箱配置方案，综合分析： 1、首先分片进行漏电保护，不至于像 方案1：总开漏电空开 + 支路普通空开 那样漏电开关一跳跳全屋，摸黑很难受 2、由于全部的支路均有漏电保护，不至于像 方案2、总开开关 + 部分支路漏电空开 那样会有部分的支路没有漏电保护 3、由于分区域的漏电保护，所以也不像 方案3、总开开关 + 全部支路漏电空开 那样需要这么多的漏电空开，节省投资。装修这东西，在保证质量的情况，能省一点是一点，因为实在是要花费好多钱，屌丝好难承受 综上，这种家庭配电箱的方案，我觉得省钱，关键是漏电保护性能也足够。大家可以参考一下我的方案进行家庭强电的设计。 另外，说说强电箱的分路。里面有吐槽，M大及其他各位CHH的大大们不要吐槽，我就是单纯讨论技术。 翻遍CHH的家装的强电设计，多数都是单独照明回路，一路或者两个回路作为照明使用。开始我也打算这样设计的，但是后来跟电工商量的时候，电工一句话：你这样设计，一个房间的维修插座或者照明什么的需要打开分总开关啊，让我有点尴尬。 本来每个房间插座单独一个回来、全屋照明合并一个或者两个回路这种设计挺好的，但是有以下原因，让我觉得这样做有缺点： 1、要是对你家回路布线陌生的电工维修你的如房间的插座或者吸顶灯，那么需要分开房间对应的插座回路和房间照明所在的回路开关，这样就失去了M大那样推荐照明单独回路的意义 2、多个房间的照明回路要是单独每个房间一条线管，那么在配电箱处照明回路的空开需要接好几根房间接来的照明回路的线，1P+N空开的接线口不大，电工师傅施工比较麻烦 所以，我觉得分区域布线才是好做法。每个区域如房间一个回路，含插座和照明，有大功率的电器如大功率空调什么的，再单独回路。这样在检修的时候直接打下对应区域的空开即可。这样简单、方便，线管布线也方便。 尤其是如别墅这样的布线，合并照明回路很让地上走的线管混乱不堪。比如说一个别墅有5层，每层有3个房间1个大厅，那么照明回路需要接4个区域的接线，很麻烦。而分区域布线才是好做法，每个房间直接一条线管到，然后再分开到各个开关、插座即可。 以上，作为我浅陋的见解，跟大家分享一下。有什么不对的，还请大家轻拍（喷）。如果有更好的做法，麻烦分享出来。 非常感谢！ 思考： 做常驻回路，包括弱电柜，服务器，安防监控，冰箱等设备，主要好处是方便，当家里长时间没人，需要关闭大部分不用的设备,预留这些设备继续运作的情况下,切断其他回路即可；（之所以切断其它回路是为了减少不必要的电子设备待机功耗，节能；减少设备运行时间，延长使用寿命；同时可以防雷保护设备安全，能想到的好处也就这么多了，是否设置要考虑施工难易，投入产出问题，而且，如果分区域，单独开这些设备所在的区域，貌似也不多费事，尤其是在有防浪涌的设备，这些设备相对集中的情况下） 每个卫生间，厨房都要单独回路 新风（里面有高压电子净化）和某卫生间放一路就行了（1：功率小，2：不用常驻，3：若含高压电子净化要漏电保护，正好和卫生间公用一个，节省投资） 用电较大设备：建议各自单独回路供电，如空调(也可以每两台空调合用一条回路)，各种土豪家的中央空调、空气能热水器或者什么大功率的即热式的热水器的，记得全部单独回路供电。简单说就是有几个空调（或大功率电器，大于2000w这样的，需要较长时间供电的）就设置几个回路。 中央空调地暖1路 中央空调属于固定电器，需要连接接地线，可以不用漏电保护 插座回路：可以根据布线的方式和插座设置数量，划分回路。插座回路这个，大概看看自己的插座上可能有的电器功率进行预估吧，通常都会设置好几个插座回路。 如今灯具都越来越节能，而且总功率不大，若分区域，可以和插座同一个回路，共用一个漏保，这样就也不用单独的漏保，节省成本，同时安全，布线方便，不差钱的各自单独回路，单独漏保 配置强电箱时，全系统漏电保护这个是总的原则，同时综合考虑漏电造成的影响，及某部分需要维护需要局部停电时造成的影响，以及布线难易，功率等，确定哪几路一个漏电保护，不差钱每个回路一个 用10平方的线到家里，所有照明 2.5平方，所有插座 2.5平方，空调各4平方，卫生间4平方，厨房4平方。 分支有漏保了，总开关要不要漏保？总开关可以不带漏保，装个空开，其它的分支线路都得带漏保。总开关是漏保的话也没事，前提是总漏保的额定剩余动作电流，要比分支漏保大一些，如，总漏保的动作电流选30MA，分支漏保的动作电流应选10MA，或15MA，这样选配漏保才行。用个过欠压保护开关就行了。 关于放浪涌：不装，这玩意接地严格要求是要独立接地，不能和插座用的接地共用，和其他接地线接一起就没意义了。注意，是独立接地！这点很多人安装防浪涌时候的误区！！！另外，电网在小区里都会设置一个总的防浪涌装置吧，真有浪涌基本都能拦下来。所以，配置好的小区可以不用折腾这东西，但是考虑到土豪乡下的别墅，还是装一个求安心吧。 灯的回路用单机断路器就行了，但要接地线,几路可以共用漏保 具体到星联湾 总2p空开，过欠压保护 主卫一路 次卫一路 厨房一路/或两路（功率比较大） 空调一路 三个卧室每个房间照明+插座一路，共三路 书房照明+插座一路 客厅及南阳台照明+插座一路 餐厅及北阳台，玄关，走道照明+插","date":"2021-03-03","objectID":"/mysite-public/%E5%AE%B6%E5%BA%AD%E5%BC%BA%E7%94%B5/:0:0","tags":null,"title":"家庭强电","uri":"/mysite-public/%E5%AE%B6%E5%BA%AD%E5%BC%BA%E7%94%B5/"},{"categories":["Live"],"content":" 光猫---路由----核心交换---交换/AP/..... 思路： 路由一般放弱电箱或书房或电视柜 核心交换放书房，其它交换及AP放其它位置 核心交换和边缘交换连两根网线做链路聚合 光猫和路由之间连两根线做双拨 nas和交换机之间两根线做链路聚合 一般弱电箱放不下无线路由，且对无线信号有屏蔽，可放有线路由，或放网管交换机（划俩wlan,一个wlan的口连放在其它地方的路由器，另外一个wlan的口做普通交换机用) 目前设备：r7000 另俩无线路由 1个8口千兆网管交换机 理想情况：路由，核心交换，nas等设备放书房 卧室：一个有线接电脑，1个有线接电视/AP 书房：1个有线接电脑，1个有线做ap,2个有线做nas,这些口直接从核心交换机引出 客厅：ps，盒子，预留HTPC.... 公共区域：客厅，餐厅AP或共用 3卧室X2+书房4+客厅3+客餐厅2ap+2连路由+2预留监控 3卧室X2+书房4+客厅2（连核心交换机） +客餐厅2ap+2连路由+2连客厅交换机+2预留监控 r7000放电视柜，电视柜还需放一个8口交换机，口才够用，且后期该位置交换机做核心交换机，不易升级，排除 r7000放弱电箱，信号受影响，候选，（其它地方仍需布线做预留ap用） r7000放书房，其它房间无线信号受影响 监控：poe摄像头，poe交换机 光猫出来iptv ","date":"2021-03-03","objectID":"/mysite-public/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92/:0:0","tags":null,"title":"家庭网络规划","uri":"/mysite-public/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E8%A7%84%E5%88%92/"},{"categories":["Device"],"content":" 原厂 先刷中间R7000_378.52-2.chk 恢复出厂 dual wan load banlance 3:1 较1:1网速快 ss 全局代理 全局tcp才能连上选全局https连不上 全局模式下网速慢 用gfwlist模式，都默认配置 更新7.4 拔掉电信猫到路由器网线，防恢复出厂后地址冲突，自动重启改ip 格式化jffs （ administration-system-format jffs at nest boot） 恢复出厂 加载7.4文件 插网线 ip和电信猫冲突，自动改为192.168.2.1 改路由器管理秘密，无线密码 software center 下载 shadowshocks enable jffs custom 设置ss（注意勾选使用ssr） 导出ss设置 保持路由器配置文件 ","date":"2021-03-03","objectID":"/mysite-public/r7000%E5%88%B7merlin%E5%9B%BA%E4%BB%B6/:0:0","tags":["R7000"],"title":"R7000刷merlin固件","uri":"/mysite-public/r7000%E5%88%B7merlin%E5%9B%BA%E4%BB%B6/"},{"categories":["Live"],"content":"重疾 确诊立即给付 中老年买到终身 多次理赔 豁免 医疗险做重疾额度补充 孩子重疾买到30岁，白血病，肿瘤多买 寿险 买了寿险可以不买意外险，因为寿险包含疾病身故＋意外身故？ 和意外险是否冲突？如何取舍？ 寿险必意外覆盖的多，如猝死，正常死亡 有负债买寿险，二者可以配合 意外险弥补寿险额度不足 寿险家庭支柱买，不必买终身 意外 意外：0免赔额，不限社保用药，100%陪付，住院也不免赔 意外：身故，伤残 意外只买消费型的 单独购买，自动续保 想法 医疗险每人必备 重疾年纪大不合算 买消费险而不是储蓄险 不买叠加功能的保险 保险配置 重疾：阳光随e，弘康a＋b，安邦和谐健康重疾附加轻症。寿险：弘康大白，同方挚爱，人保精心优选，瑞泰寿险。我都比较过，以上性价比最高！ 支柱：重疾，意外，医疗，寿险 孩子：意外，重疾，医疗 全职太太：重疾，意外，医疗 意外不保猝死，生活不规律，压力大的买猝死 定期寿，能覆盖猝死，工作压力大的可买消费型定期寿，有负债选定期寿 ","date":"2021-03-03","objectID":"/mysite-public/%E4%BF%9D%E9%99%A9%E9%85%8D%E7%BD%AE/:0:0","tags":null,"title":"保险配置","uri":"/mysite-public/%E4%BF%9D%E9%99%A9%E9%85%8D%E7%BD%AE/"},{"categories":["Trade"],"content":"参考 https://blog.csdn.net/luanpeng825485697/article/details/78442062 https://blog.csdn.net/wqy161109/article/details/80052716 请求http://hq.sinajs.cn/list=sh601006 返回： var hq_str_sh601006=“大秦铁路, 27.55, 27.25, 26.91, 27.55, 26.20, 26.91, 26.92, 22114263, 589824680, 4695, 26.91, 57590, 26.90, 14700, 26.89, 14300, 26.88, 15100, 26.87, 3100, 26.92, 8900, 26.93, 14230, 26.94, 25150, 26.95, 15220, 26.96, 2008-01-11, 15:05:32”; 含义如下： 0：”大秦铁路”，股票名字； 1：”27.55″，今日开盘价； 2：”27.25″，昨日收盘价； 3：”26.91″，当前价格； 4：”27.55″，今日最高价； 5：”26.20″，今日最低价； 6：”26.91″，竞买价，即“买一”报价； 7：”26.92″，竞卖价，即“卖一”报价； 8：”22114263″，成交的股票数，由于股票交易以一百股为基本单位，所以在使用时，通常把该值除以一百； 9：”589824680″，成交金额，单位为“元”，为了一目了然，通常以“万元”为成交金额的单位，所以通常把该值除以一万； 10：”4695″，“买一”申请4695股，即47手； 11：”26.91″，“买一”报价； 12：”57590″，“买二” 13：”26.90″，“买二” 14：”14700″，“买三” 15：”26.89″，“买三” 16：”14300″，“买四” 17：”26.88″，“买四” 18：”15100″，“买五” 19：”26.87″，“买五” 20：”3100″，“卖一”申报3100股，即31手； 21：”26.92″，“卖一”报价 (22, 23), (24, 25), (26,27), (28, 29)分别为“卖二”至“卖四的情况” 30：”2008-01-11″，日期； 31：”15:05:32″，时间； 查询大盘指数，比如查询上证综合指数（000001）： http://hq.sinajs.cn/list=s_sh000001 如果你要同时查询多个股票，那么在URL最后加上一个逗号，再加上股票代码就可以了；比如你要一次查询大秦铁路（601006）和大同煤业（601001）的行情，就这样使用URL： http://hq.sinajs.cn/list=sh601003,sh601001 ","date":"2021-03-03","objectID":"/mysite-public/sina%E8%A1%8C%E6%83%85%E8%8E%B7%E5%8F%96/:0:0","tags":["sina"],"title":"Sina行情获取","uri":"/mysite-public/sina%E8%A1%8C%E6%83%85%E8%8E%B7%E5%8F%96/"},{"categories":["Trade"],"content":" 矩形虽为持续形态，通常只是休整，但需注意其是否会演变为反转形态。如双重或三重底或顶。尤其是在大趋势持续很长时间的时候。 矩形模式中，交易量是值得观察的重要线索。 如果上冲时交易量重，而下撤时交易量轻，那么该形态可能是上升趋势的持续形态，如果较重的交易量发生在向下运动这一边，那么这可以看成趋势正在反转的警讯。 摆动指数在横向交易区间特别有用（如矩形）。但一旦发生突破，其效用便会下降。 时刻注意风险。永远堤防突发情况，或判断失误造成的灾难。 研究各个市场的具体特性。对数字驱动的指标进行调整优化，以适应市场。 对各个股票也需研究其历史，总结其“习性”。 研究技术可靠性指数（对具体的交易对象）。 相互验证：各种分析手段，技术指标信号相互参照，保证它们中的大部分相互验证，指向共同的方向。另外各指标指数等，也有时间维度。 也需要根据市场不同的环境，参考选择不同的指标，评估指标权重。（注意指标适用范围） 相关市场所组成的群类中，各个市场倾向于同进同止。同理：相互背离。（可考虑做空） 对具体的交易对象，可研究各种指标在其历史中的表现，选择最优指标。 对图顺序: 长——中——短 不能只见树木，不见森林 市场总览——行业——个别交易品种 温和的上涨（45度趋势线或较平），一段时间后，可能带来人气，而突然加速上涨、 图标分析不领先于市场。 根据灵敏度要求调整时间跨度。（当市场急剧上升，从而价格相对地处于“高处不胜寒”的境地，我们可以缩短时间跨度，使系统更灵敏；当市场横向伸展时扩大时间跨度） 没有标准答案 相信自己 当有某些想法，有些依据经思考觉得合理时，大胆运用，不必寻找认同。事实上，卓越的人，伟人发明创造并不是循规蹈矩 摆动指数必须附属于基本的趋势分析。 从这个意义上说，它只是一种第二位的指标。 市场主要趋势是压倒一切的，顺着它的方向交易有重要意义。 一场重要的运动即将降临时，摆动指数的分析用处不大，甚至可能使用户误入歧途。然而一旦市场运动趋于尾声，摆动指标就极有价值了。 我们不应当孤立地采用摆动指数分析所提供的买卖信号，而逆着当前的显要趋势方向交易。当摆动指数向上穿越零线时，只有在市场趋势也向上的条件下，我们才能真正的买进，建立多头头寸，而当向下穿越零线时，只有在市场趋势也向下的条件下，我们才能真正地卖出，建立空头头寸。 RSI超过70时超买，低于30超卖。（在短期中摆动幅度较大，可分别调高上限，调低下限。另在牛市和熊市时，RSI会发生漂移现象，所以80通常为牛市超买水平，20是熊市超卖水平） 相互背离是摆动指数的重要应用，可能是最有价值的应用。（可以辅助判别趋势的反转） 判别相互背离现象时，有一个重要的先决条件，即背离现象应当发生在摆动指数的极限区域及其附近 王尔德本人也把相互背离现象看成RSI最有价值的特性。 在趋势强烈的市场环境中（事实上，摆动指数不太适应这种情形),无论是上升趋势还是下降趋势，通常在趋势发生后不久，在相应的摆动指数图上就会出现极端状态的读数，在这种情形下，如果我们就认为市场处于超买和超卖状态，通常是言之过早的 在强烈的上升趋势中，超买的市场状态常常能够持续一段时日，仅仅根据摆动指数进入了上边界这一点，并不能构成足够的平回多头头寸的理由，更不用说冒大险，越强劲的上升趋势做空头了。 当RSI第一次进入超买或超卖区域的时候，通常只是个警告信号。而值得我们密切关注的信号是摆动指数再次进入危险区域的时候。如果RSI第二轮的动作未能验证价格趋势，并没有相应地达到新高点或新低点（于是，在摆动指数图上就出现了双重顶或双重底形态）。就可能出现RSI的背离现象。此时，我们不妨采取一点防备措施，以保护已有的头寸。如果摆动指数朝市场相反方向突破了自身的前一个峰或谷，那么背离现象（或衰竭动作）就得到了证实。 然而，除非价格趋势本身也显示出反转的迹象，否则，即使上述情况已经出现了，如果我们平仓脱离市场，可能时机还是不成熟的，在对付这种局面时，紧凑的保护性止损指令或许是最靠得住的，从这里我们可以得到一个教训：不应该仅仅因为摆动指数接近了极限值，就放弃有利头寸，应当耐心地伺察RSI第二次进入危险区，只有到这个时候方可采取一些预防措施，比如部分地平仓获利，或者采取比较紧凑的保护性止损指令等。 注意摆动指数的应用范围。其在市场处于横向延伸价格起伏不定时最出色。但它也带来一个问题，随着价格突破的出现，新的趋势尚处于早期阶段，此时，摆动指数常常很快就达到极端区域，并且将在其中维持一段时间，碰到这种情况，我们应当考虑基本的趋势分析，而让摆动指数退到幕后。之后，随着趋势的日渐成熟，我们才逐渐增加摆动指数在我们考虑中的份量。当主要趋势信号出现后，如果交易商仍拘泥于摆动指数，等到它进入超卖状态时才买入，那么，他将错过很多生气勃勃的牛市动作。一言以蔽之，当重要趋势处于初期时，不要太介意摆动指数，但是当它渐趋成熟时，就应密切注意它。 相反意见理论认为，当绝大多数人的意见一致时，他们一般是错误的一方 1 相反意见理论显示了买方和卖方的余力：以某个投机者为例，假定该投机商阅读了他最信奉的咨询材料后，坚信市场即将大规模地上升，那么，那份材料越是牛气十足，这个交易商就会越积极地入市买进，但是，一旦他的资金全部的投入了市场，他自己就已经处于超买状态了——即他已剩余资金再投入市场了。 我们把这种情况推广到全体市场参与者，如果有80%到90%的交易商对某市场看好，那么就意味着他们已经在这个市场买入了头寸，那么剩下来，还有谁来继续买入，把市场推得更高呢？ 如果交易商们已经以压倒性的多数倒向了市场的某一边，那么，简而言之，市场上已经没有足够的买进和卖出压力来把当前趋势继续推动下去了。 2 相反意见理论体现了大小户实力对比：期货交易“总和为零”，每一手多头合约都伴随着别人的一手空头合约，如果80%的交易商都站到了市场多头一边，那么剩下的20%的人（空头）必定资金雄厚，才能完全容纳80%的人所持有的多头头寸，这意味着空头者必定拥有庞大的资本，他们才是市场上的强者，相形之下，另外80%的人平均每人拥有的头寸就小得多了，因此他们是弱者，每当价格突然变化时，他们不得不把这些多头头寸卖出平仓。 如果交易商们已经以压倒性的多数倒向了市场的某一边，那么，简而言之，市场上已经没有足够的买进和卖出压力来把当前趋势继续推动下去了。 2 相反意见理论体现了大小户实力对比：期货交易“总和为零”，每一手多头合约都伴随着别人的一手空头合约，如果80%的交易商都站到了市场多头一边，那么剩下的20%的人（空头）必定资金雄厚，才能完全容纳80%的人所持有的多头头寸，这意味着空头者必定拥有庞大的资本，他们才是市场上的强者，相形之下，另外80%的人平均每人拥有的头寸就小得多了，因此他们是弱者，每当价格突然变化时，他们不得不把这些多头头寸卖出平仓。 如果交易商们已经以压倒性的多数倒向了市场的某一边，那么，简而言之，市场上已经没有足够的买进和卖出压力来把当前趋势继续推动下去了。 2 相反意见理论体现了大小户实力对比：期货交易“总和为零”，每一手多头合约都伴随着别人的一手空头合约，如果80%的交易商都站到了市场多头一边，那么剩下的20%的人（空头）必定资金雄厚，才能完全容纳80%的人所持有的多头头寸，这意味着空头者必定拥有庞大的资本，他们才是市场上的强者，相形之下，另外80%的人平均每人拥有的头寸就小得多了，因此他们是弱者，每当价格突然变化时，他们不得不把这些多头头寸卖出平仓。 大鱼吃小鱼，交易好的早晚成为大户，而不好的迟早沦为小户。 市场意见一边倒 若数字处于超买范围时，如果价格无力对有利的消息作出反应，那么这就是个清晰的警讯，表明市场可能要反转，当第一个负面消息出现后，通常就足以把价格很快地推向另一个方向，相应地，当他们处在超卖区（低于20%）时，如果价格无力对不利的消息作出反应，那也是警讯，显示当前市场上的低价已经包含了所有的坏消息，一有看涨的讯息，就会把价格推上去。 一般说来，我们应顺着意见一致数字的趋势方向进行交易，直到极限。但要警惕趋势可能发生变化的信号。 意见一致数字的方向性变化如果达到50%的程度，通常就构成重要信号，在这种关键时刻，为了有利于确认市场反转，我们应同时兼顾那些更正统的分析手段，如支撑阻挡，趋势线，移动平均线等，以验证趋势的反转现实，在看涨意见一致数字处于超买或超卖区时，摆动指数图上的背离现象特别有参考价值。 看涨意见一致数字的回撤现象：50%回撤区常是支撑或阻挡，如果被决定性的穿越，往往构成趋势反转的警讯。 波浪理论本意用在平均指数 群体心理是艾氏理论的重要依据之一 有例为证，正因为黄金市场具有广泛的“群众基础”波浪分析在这个市场上大有作为。 波浪理论最后用在平均指数。 波浪理论应当与其它技术协调使用。 没有哪个单独的理论包含了所有答案。艾略特波浪理论和斐波纳奇数字无疑是成功的，但如果说有的商品市场都可以用艾略特持续形态来解释，那是不对的，如果看出了艾略特形态，当然会加以利用，如果看不出来，就不妨另辟蹊径，如果无视其它技术指标，给不清晰的市场变化勉强加上艾略特形态的话，那就是死搬硬套，后果好不了，关键仍然是只把艾略特波浪理论看作是市场预测之谜解答的一部分。 移动平均线和摆动指数可以通过主流周期而得到优化，在趋势线分析中，我们可以借助周期分析对趋势线进行甄别，以确认有效的趋势线，在价格形态分析中，如果结合考虑周期的峰和谷的分布，也能提高其效能，另外，我们还可以通过“时间窗”方法，对价格行为进行过滤，略去无关紧要的变化，突出重要的周期性顶和底附近的变化。 趋势解析：首先，我们选定一个移动平均线的时间参数，其长度取决于用户想要分","date":"2021-03-01","objectID":"/mysite-public/%E5%AD%A6%E8%82%A1%E7%AC%94%E8%AE%B0/:0:0","tags":null,"title":"学股笔记","uri":"/mysite-public/%E5%AD%A6%E8%82%A1%E7%AC%94%E8%AE%B0/"},{"categories":["Trade"],"content":" 随着证券市场的发展，股票数量越来越多，选股也越来越困难， 选对了股票能得到超额利润，选错了则有可能亏损， 我不想赌博，也不想博彩，我需要确定的稳定收益， 自知脑笨，手脚又不灵活，故选择50ETF作为跟踪目标， 相信指数从长期来看总归是向上的，不可能发生退市或摘牌的风险， 什么是50ETF? 这只由华夏基金管理有限公司推出的上证50ETF，是中国内地首只ETF产品,交易代码510050 交易型开放式指数基金(ETF)，是指经依法募集的，投资特定证券指数所对应组合证券的开放式基金，其基金份额用组合证券进行申购、赎回，并在上海证交所上市交易。 业内人士指出，上证50ETF兼容了开放式基金和封闭式基金的优点，具有交易成本低廉、管理费用较少、信息完全公开、标的权威可信的优势。 定投数量： 设每月200份（也可根据你的账务状况设300或400不等）， 操作原则： 上证指数目前最高为6124.04点，最低为95.79点 （6124.04+95.79）/2＝3109.92点，设此点位为中轴线。 我们设3109.92点以上为高位区，以下为低位区， 我们的定投计划只在低位区进行，超过3109.92则停止定投， 操作细则： 指数区间，….定投份数 2733.15-3109.92，100 2356.38-2733.14，200 1979.62-2356.37，300 1602.85-1979.61，400 1226.09-1602.84，500 849.32-1226.08，600 演变： 假设上证指数又创出8000点的新高，则： （8000+95.79）/2＝4047.90点，重新设此点为中轴进行操作，以此类推。 投入总金额： 假设今年30岁，期望给自己做一份养老金计划，则需定投30年（60岁退休）， 教条的算，每月500*12＝每年6000元*30＝180000元， 按上述的操作原则，在中轴线以上是不投的，死板算法则需投入18万*1/2＝9万， 而因为指数是不断地向上发展，中轴线也在向上修正， 故实际投入肯定大于9万，一般不会超过12万（18万*2/3） 以12万为标准，月定投500元，实际投入约为月333.33元， 如计划月定投300元，实际投入约为月200元。 333.33元与200元应该不会对你的生活产生重大影响，也是我们有能力承受的。 并且我们知道绝不会输，一定会赢！只需时间,我们有时间。 表一说明： 1， 买入价2.300元是假设价，当然是越便宜越好，以下的价格是根据上证指数的上升趋势换算出来的，作为大致的依照， 2， 保本价，是同档次价格的卖出保本价格，设费率为千分之2.5，实际可能会低一些， 3， 2%，这是以后要操作T+0的至少价格，已包括费率， 4， 股数，定投数量一律为200份（假设） 5， 持股数，是累计数量，长线持仓，并作为T+0或反T+0的底仓或种子筹码。 50ETF网格化操作计划： 以第一笔买入价为基础，每下跌5%补仓，一直补到0.707（相当于998点），共需资金约5万元，在此假设998点为底部。 上涨超过至少2%时考虑卖出，究竟多少价格才卖根据自己的操作经验来定， 即：实际买入价要低于表中买入价，实际卖出价要高于2%价， 表二中是以2000元为假设金额（费率起步价为5元）可以同比例放大，根据自己不同情况， 通过机械化的操作不断地降低成本， 有种子筹码时考虑T+0操作，对大势判断有把握时进行反T+0操作， 每月的操作根据定投计划留下种子筹码， 此操作的最大代价是套牢5万元（指数打回998点）并坚信一定会解放！ 目标是：不断地降低成本，不断地增加筹码！ 中轴线以上时，不增加筹码或是只增加0成本筹码。 本人股票知识有限，且教训多于经验，没有能力去捕捉黑马，也没有能力对别人提出买卖建议， 在此只是提供一种思路，供有兴趣的朋友交流。 也希望看贴的朋友能有好的建议，或对上述设想中的漏洞提出批评，以利于改进与完善。 关于买点比较容易设定，只要根据自己的心理价位，在某个区域起一路建仓即可， 关于卖点较有难度，因为必须判断哪儿才是“高点”而每个人心中的“高点”又是不一样的，比如：这波冲击6124点，在6124点买入的朋友当然是看好8000点或10000点时才买的，实际走势与我们的期望值往往不同，究竟怎么处理才好呢？ 我是这样考虑的： 手中的长线筹码抛不抛都无所谓，即使抛了也一定要补回的！ 选择抛出的“点”一定得满足：有充分的把握能够安全补回！ 至于点数不重要，有把握补回才是最要紧的， 抛出后未能补回来这是最要命的事，假设你在6001点卖出，而指数直奔8000点而去，这时你怎么办？追涨？这是不允许的！而不追又可能踏空，故无论如何不能陷入这种困境。 原则必须牢记：我们是要持仓20年的！ 每个人对走势判断均不一样，很难有量化的东西作为标杆， 假如是我在操作，假如前面已建立了54个月的底仓， 我会在2008年1月25日下午2：30全线清仓！ 因为这一周的周K线传递的信息是：前期的4778点被击穿，一个下降通道正在构成， 尽管不能说一定会大幅度地下跌，但比较有把握能在适当低位补回， 如果吃不准的话，宁可不动。 我前面所说的在中轴线以上停止建长线仓，只做短线的含义就是： 只要有把握补回来，我就卖！不断地折腾，扩大战果（增加数量）或降低持仓成本。 关于卖出：自己对什么最熟悉，最有把握就依照它来，每人情况各不相同，没有公式可寻。 ","date":"2021-03-01","objectID":"/mysite-public/%E5%AE%9A%E6%8A%95etf/:0:0","tags":null,"title":"定投ETF","uri":"/mysite-public/%E5%AE%9A%E6%8A%95etf/"},{"categories":["Trade"],"content":"Trading checklist 交易你的计划，计划你的交易（每只股挂好买单，止损单，想好各种可能，盘中不改计划，极力避免手动操作） 小周期大周期 等待机会，占据有利位置（止损及期望盈利比率） 适时离开市场 问问自己能否在止损点退出 入场的理由，策略 有选择的交易，弱水三千，只取一瓢饮 关键点买入（趋势刚刚开始时买入，避免早买时等待的时间成本，交易其它股票机会成本） 放弃平庸是机会 问自己打算持有多久 心法 危机发生后建仓：时间和空间间隔。如间隔10% ，间隔一个月 趋势交易与市场周期及投资者钟摆式摆动融合 向下的风险，也有向上的风险（踏空） 没有杠杆，时间是投资的朋友，加了杠杆，时间便成了投资的敌人。 只有不怕错过，才能真正抓住好的投资机会。 你可以做错很多事，但只要做对了一件事—也就是砍掉亏损头寸—你就能在这一行赚很多钱 长期重仓卧倒好公司，在不同标的间切换，找不到好机会时退出 ？ 坚持一直方法，等风来？ 人只能赚自己认知范围之内的钱，市场天天开，钱赚不完 降低交易频率，日线上交易，提前计划，日内尽量不做决断，放弃平庸机会（） 日线图与分时图周期差别太大，日线与60分钟更接近 建议不要看20日以下的均线。因为均线是比较滞后的指标，周期看太小会被震荡玩死 负面清单，不做什么 观点被市场证实后再交易，不能仅仅根据自己的看法交易 看图四要素，量价时间周期 预期 交易假设 市场走势 交易假设很重要，更重要的是应对。无论市场涨跌都要有应对措施，做好计划。 计划你的交易，交易你的计划。 跟随市场，让市场指导操作，而不是预期。 当预期与市场不一致，无论市场对自己有利与否，紧盯市场，跟随市场，及时执行计划； 感悟拿到市场去验证 涨不言顶，跌不言跌，该买则买，该卖则卖,不要觉得股价过高而不敢卖，也不要觉得股价过低而不舍得卖 选股 基本面比较好的标准是：ROE≥15%、资产负债率≤50%、现金收入比≥100%、营业收入同比增长率≥15%、审计结论为“标准无保留意见”。同时，股票总市值大于150亿元. 港股通 明显基金经理 买 投机严格价升加仓，止损 长期，做好计划，可分批买，且最好为基金,低点支撑位可首笔买，不需严格等趋势确认，如首笔下跌，加仓拉开间隔，最好10点以,其余个股严格右侧交易 买入时记录投资逻辑是什么 逻辑驱动买入，逻辑驱动卖出 是否买入 买入 价格 考虑短期市场整体走势 收到关键点位再买入？ 尽量右侧交易，下跌盯盘提醒股价，跌破关键点后，下突破该点位的智能交易买入单 买进后，操作不算完，下好或修改止损单，下一次或两次买进单，阶段性止盈单 假设暴跌怎么办，买什么 择时：好生意好公司好与技术分析结合 大部分时间震荡，或下跌，少时间涨，且长的快，定价突破后买入，不错过 机构持仓 看好后，持续跟踪，每次突破后都买，不要错过机会 ","date":"2021-03-01","objectID":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/:0:0","tags":null,"title":"交易思考","uri":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/"},{"categories":["Trade"],"content":"开仓 市场整体低迷，谨慎开仓 什么时候进攻，什么时候防守 要右侧交易尽量避免左侧交易。 水平窄幅震荡突破，上涨突破时买，突破要带量。尽量避免v形转向上买，如果买带量 仓位低时指数类基金，大白马可以水平稍向上时交易，或支撑位附近稍高点买入（非上涨时买入时，量要少） 如果一定要左侧买入总仓位要低，单次买入要低，加仓时间幅度要拉开，同时拉大时间周期 大趋势向上: 价格下跌后企稳，窄幅震荡一段时间在震荡区间底部（波段或反弹）亏损后或三天无盈利，赶紧退出 下跌一段时间，仍在下跌中，买在最低点下方，20周或更长周期均线位置（赌位置）（白马股）亏损后或三天无盈利，赶紧退出 窄幅震荡一段时间，波动小，底部微微抬升时买入 突破，亏损后或三天无盈利，赶紧退出 横盘: 1.窄幅震荡一段时间，波动小，底部微微抬升时买入 趋势策略/震荡策略 顺势、轻仓、持赢、止损 做反弹有一个重要原则，就是不要买在放量成交的区域，因为你如果和80%以上的人成本都差不多，就一定挣不到钱，一定要比80%的人买的更便宜10-20%才可以，如果买不到就放弃。 v形反转，或下跌时间不够长的反转，反转时只买入一次，设紧密止损？反弹到关键点,抛出部分，突破后再买回来？ v形反正结合支撑买入？ 回调深度够，时间不够，只买一笔？ 如买入后下跌，后续再买入，都当重新开仓，需满足买点条件 v形反转买入，短期盈利多部分止盈退出 ","date":"2021-03-01","objectID":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/:0:1","tags":null,"title":"交易思考","uri":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/"},{"categories":["Trade"],"content":"加仓 不在亏损时加仓，除非拟加仓点为新买点或计划好的定投/分批买入 不要试图摊薄成本，除非交易法则告诉该买入 加仓后为新头寸单独设立止损点 集中加仓，分批加仓？ 分批加仓，拉开距离？ 海龟加仓：每支股票4次买入 卖 趋势结束退出.但短期过猛，且有走坏趋势，可否在通道顶端或其它点卖出部分，走势正常后补回来 利弗莫尔卖加回补机制：正常回调（缩量，幅度有限），冲高大幅回落果断离场，后续市场正常，进场，要有回补机制；一次性事件引发短期大幅度冲高，而事件对基本面音响有不确定性，果断离场 ","date":"2021-03-01","objectID":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/:0:2","tags":null,"title":"交易思考","uri":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/"},{"categories":["Trade"],"content":"止损 考虑因素 刚买与已有丰厚盈利 打算持有时间长短 现有仓位水平高低 长期资本，短期资本 股价与成交量的变化情况？ 闪动危险信号的时候 严格止损 止损要快。 时间止损 突破关键点赶紧行动，行动后亏损，或三交易日无盈利退出 动态止损 头寸管理 单笔交易仓位是自动的，总体仓位可以加以控制 交易记录 周期长，中，短 趋势，价值 买入逻辑 大盘弱时，如需布局，左侧买入时，要分批买入,一次买入不要太多.同时，不要同一段时间总体买入过多。 ","date":"2021-03-01","objectID":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/:0:3","tags":null,"title":"交易思考","uri":"/mysite-public/%E4%BA%A4%E6%98%93%E6%80%9D%E8%80%83/"},{"categories":["Tools"],"content":"添加helm repo helm repo add yugabytedb https://charts.yugabyte.com helm repo update helm search repo yugabytedb/yugabyte 准备docker image docker pull yugabytedb/yugabyte:2.5.1.0-b153 kind 集群需导入镜像 kind load yugabytedb/yugabyte:2.5.1.0-b153 –name yugabyte 部署yugabyte kubectl create namespace yb-demo helm install yb-demo yugabytedb/yugabyte --namespace yb-demo --wait Check cluster status with kubectl kubectl --namespace yb-demo get pods kubectl --namespace yb-demo get services Check cluster status with Admin UI kubectl --namespace yb-demo port-forward --address 0.0.0.0 svc/yb-master-ui 7000:7000 \u0026 Run YSQL shell from inside of a tablet server kubectl exec --namespace yb-demo -it yb-tserver-0 -- /home/yugabyte/bin/ysqlsh -h yb-tserver-0.yb-tservers.yb-demo Connect yugabute outside cluster kubectl --namespace yb-demo port-forward --address 0.0.0.0 svc/yb-tservers 5433:5433 \u0026 Cleanup YugabyteDB Pods helm delete yb-demo -n yb-demo NOTE: You need to manually delete the persistent volume kubectl delete pvc –namespace yb-demo -l app=yb-master kubectl delete pvc –namespace yb-demo -l app=yb-tserver ","date":"2021-02-23","objectID":"/mysite-public/deploy-yugabyte-on-k8s/:0:0","tags":["Tools"],"title":"Deploy Yugabyte On K8s","uri":"/mysite-public/deploy-yugabyte-on-k8s/"},{"categories":["Tools"],"content":"配置网络 查看并连接设备 nmcli d nmcli d connect xxx 查看并配置连接 nmcli c nmcli c modify ens192 ipv4.address x.x.x.x/24 ipv4.gateway x.x.x.x ipv4.dns 8.8.8.8 ipv4.method manual connection.autoconnect yes 114.114.114.114 cat not resolve gcr.io etc, but 8.8.8.8 can 启用连接 nmcli c reload nmcli c up xxx ","date":"2021-02-22","objectID":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:0:0","tags":["Tools"],"title":"Centos8工作环境配置","uri":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["Tools"],"content":"Centos8 源设置 dnf config-manager --add-repo https://mirrors.aliyun.com/repo/Centos-8.repo 安装docker 安装docker dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf repolist -v dnf install -y docker-ce --nobest --allowerasing 设置国内源 vim /etc/docker/daemon.json { \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn/\",\"https://hub-mirror.c.163.com\"] } docker info Run docker without sudo useradd xxx passwd xxx usermod -aG docker xxx \u0026\u0026 newgrp docker 开机启动docker sudo systemctl enable –now docker 安装Golang 卸载旧版本 rm -rf /usr/local/go 安装新版本 官网下载安装包 tar -C /usr/local -xzf gox.xx.x.linux-amd64.tar.gz 设置环境变量 vim $HOME/.bash_profile export PATH=$PATH:/usr/local/go/bin 设置代理 打开Terminal执行 go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct ","date":"2021-02-22","objectID":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:0:1","tags":["Tools"],"title":"Centos8工作环境配置","uri":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["Tools"],"content":"安装vnc 参考Centos8安装VNC ","date":"2021-02-22","objectID":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:0:2","tags":["Tools"],"title":"Centos8工作环境配置","uri":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["Tools"],"content":"安装git 安装git包 dnf install git 配置ssh key if [ ! -e /root/.ssh/id_rsa ];then ssh-keygen -t rsa -P '' -f /root/.ssh/id_rsa fi 把公钥添加到 github(setting\u003essh and gpg keys\u003enew ssh key) 测试连接 ssh -T git@github.com 安装Hugo 参考hugo的使用 本地k8s集群配置 安装kubectl curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" curl -LO \"https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256\" echo \"$(\u003ckubectl.sha256) kubectl\" | sha256sum --check sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl 下载特定版本kind curl -Lo ./kind \"https://kind.sigs.k8s.io/dl/v0.10.0/kind-$(uname)-amd64\" chmod +x ./kind mv ./kind /usr/local/bin/kind 创建三worker节点k8s集群 vi kind.yaml kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 # One control plane node and three \"workers\". # # While these will not add more real compute capacity and # have limited isolation, this can be useful for testing # rolling updates etc. # # The API-server and other control plane components will be # on the control-plane node. # # You probably don't need this unless you are testing Kubernetes itself. nodes: - role: control-plane - role: worker - role: worker - role: worker kind create cluster –config=kind.yaml –name yugabyte 安装Helm curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh Istio配置 Install istioctl curl -sL https://istio.io/downloadIstioctl | sh - export PATH=$PATH:$HOME/.istioctl/bin Install istio kubectl create ns istio-system kubectl apply -f - \u003c\u003cEOF apiVersion: install.istio.io/v1alpha1 kind: IstioOperator metadata: namespace: istio-system name: example-istiocontrolplane spec: profile: demo EOF Confirm the Istio control plane services kubectl get svc -n istio-system kubectl get pods -n istio-system Knative配置 Installing the Knative Operator kubectl apply -f https://github.com/knative/operator/releases/download/v0.20.0/operator.yaml Verify the operator installation kubectl get deployment knative-operator Track the log kubectl logs -f deploy/knative-operator ","date":"2021-02-22","objectID":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/:0:3","tags":["Tools"],"title":"Centos8工作环境配置","uri":"/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"},{"categories":["Tools"],"content":"配置如下: 散热 海盗船h60 378.9 电源 海盗船sf600 698.9 机箱 追风者217e 700 主板 华硕rog z390i 1869 显示器 dell2419 1498.5 硬盘 三星970evo500g 879 硅脂 猫头鹰nt-h1 18.9 cpu 9700k散片 2459 无线网卡 dell dw1560（bcm94352z） 185S 键盘鼠标自备 内存 同事闲置 注意事项： 系统安装：第一阶段通过u盘安装到硬盘。安装过程中会重启，此时需按热键选择启动设备（asus 为F8） ，选择通过u盘启动，在引导界面选择硬盘名称，完成第二阶段安装。第二阶段安装完成后使用multibeast\\ kextbeast\\ clover configurator \\clever等工具安装clever及驱动，完成post Installation. clover configurator已能自动升级clover ,升级kexts kextBeast使用方法:把kext文件放到桌面，然后运行kentbeast程序即可. 升级EFI时：backup your existing, working EFI folder. Copy/paste your Serial, Board Serial, UUID, and Memory settings to the new config.plist. drivers64uefi 放一些启动时的驱动，比如apfs **删除kext:**delete the extra kext from /Library/Extensions, then do a rebuild of your kextcache using this command in terminal:sudo kextcache -i / sudo kextstat kext utility 解决权限问题，重建缓存 工具： unibeast (tonymacx86) multibeast (tonymacx86) kextbeast (tonymacx86) kent utility Clover Configurator (tonymacx86) geekbench hackintool 原intel FB Patcher 文件： clover （tonymacx86） kexts (tonymacx86 …) SSDT-UIAC.aml （tonymacx86） FakeSMC 后续可能被virtualsmc取代 Lilu WhateverGreen AppleALC 后续可能集成到whatevergreen usbinjectall DW1560: BrcmPatchRam BrcmFirmwareRepo.kext AirportBrcmFixup.kext 参考文档 主要参考如下两篇文章 tonymacx86 果黑小兵的部落阁 Kent安装及使用 https://www.tonymacx86.com/threads/guide-installing-3rd-party-kexts-el-capitan-sierra-high-sierra-mojave.268964/ BIOS设置参考 https://www.tonymacx86.com/threads/asus-rog-strix-z390-i-gaming-motherboard-specs.259848/page-24 https://www.tonymacx86.com/threads/pastrychefs-asus-rog-strix-z370-g-gaming-wi-fi-ac-build-w-i9-9900k-amd-vega-56.239969/ Advanced/CPU Configuration/Intel Virtualization Technology - Enabled Advanced/System Agent (SA) Configuration/VT-d - Disabled Advanced/System Agent (SA) Configuration/Graphics Configuration/Primary Display - PCIE (This will not be available if you are only using UHD 630.) Advanced/System Agent (SA) Configuration/Graphics Configuration/iGPU Multi-Monitor - Enabled (This will not be available if you are only using UHD 630.) Advanced/System Agent (SA) Configuration/Graphics Configuration/RC6(Render Standby) - Enabled Advanced/System Agent (SA) Configuration/Graphics Configuration/DVMT Pre-Allocated - 192M (64M should also work) Advanced/USB Configuration/Legacy USB Support - Enabled Advanced/USB Configuration/USB Keyboard and Mouse Simulator - Disabled Boot/CSM (Compatibility Support Module)/ Launch CSM - Enabled (Updated January 22, 2018: I originally used Disabled because it would allow Clover to boot in to the monitor’s native resolution. Since then, I have found that Enabling CSM gives better compatibility with devices such as AQC107 and multi monitor support albeit at the loss of native resolution for the Clover boot menu. Bottom line, try both and use the one that works best with your hardware.) Boot/Secure Boot/ OS Type - Other OS (Optional)Ai Tweaker/Ai Overclock Tuner - XMP usb: 使用ssdt文件（SSDT-UIAC.aml） put it in EFI/Clover/ACPI/patched, which will limit USB ports within 15 ports. Notice: Due to 15 ports limits, one of the Front USB Port can only read USB3.0. 参考 https://www.tonymacx86.com/threads/asus-rog-strix-z390-i-gaming-motherboard-specs.259848/page-22 https://www.tonymacx86.com/threads/guide-creating-a-custom-ssdt-for-usbinjectall-kext.211311/ https://www.tonymacx86.com/threads/xhc-usb-kext-creation-guideline.242999/ 升级clover try to only have the efi partition of the target drive mointed 挂载EFI分区步骤： diskutil list sudo diskutil mount … 或者通过clover configuator 挂载 安装步骤： 参考Tonymacx86 相应版本guide Maintenance \u0026 Future Updates Always check the forum to see if new versions of macOS break anything. Check for updates to: Everything in /EFI/CLOVER/kexts/Other/ Clover apfs.efi which is located in /EFI/CLOVER/drivers64UEFI/ (No longer needed. Superseded by ApfsDriverLoader.efi.) Of particular interest to this build are: Clover EFI bootloader FakeSMC.kext USBInjectAll.kext XHCI-200-series-injector.kext (Use the XHCI-200-series-injector.kext because it matches our a2af Devi","date":"2021-01-20","objectID":"/mysite-public/asus-rog-strix-z390-i-gaming-hakintosh/:0:0","tags":["Tools"],"title":"ASUS ROG STRIX Z390 I GAMING Hakintosh","uri":"/mysite-public/asus-rog-strix-z390-i-gaming-hakintosh/"},{"categories":["Tools"],"content":"celedhrim版kodi-server centos 系统 docker pull celedhrim/kodi-server docker run -d --restart=\"always\" --net=host --privileged -v /tmp/kodi:/opt/kodi-server/share/kodi/portable_data celedhrim/kodi-server 不加–privileged 容器会不断重启,docker logs显示 Could not init logging classes. Log folder error (/opt/kodi-server/share/kodi/portable_data/temp/) ERROR: Unable to create application. Exiting Attention: /tmp/kodi换成要保存kodi配置文件的目录 linuxserver.io headless版 centos系统 有问题上linuxserver.io论坛找;unraid论坛forums.lime-technology.com也有相关的东西; 好处： 配置和程序分离，方便升级版本； 库由mysql/mariadb集中管理，每个docker kodi instances都从db里获取信息，库更新后，都能看到一样的东西； 在一个客户端操作后，或更新文件后，所有客户端能看到最新状态，比如tv看到多少分钟停下的； Attention: 不要docker clean library ，通过任意一个clinet做 docker pull linuxserver/kodi-headless mkdir /root/kodi docker run -d --restart=\"always\" --net=host --privileged --name=kodi-headless -v /root/kodi:/config/.kodi -p 8080:8080 -p 9777:9777/udp -e PGID=0 -e PUID=0 linuxserver/kodi-headless 不加–privileged会报错，不能生成配置文件;–name 会给容器命名，好识别，好链接 第一次运行后会在/root/kodi下生成配置文件，确认生成后停掉kodi-headless 可以加-e TZ=Asia/Shanghai修改时区，没有尝试 docker stop kodi-headless 根据自己情况修改配置文件advancedsettings.xml docker start kodi-headless 这时gui还是不能访问,修改 guisettings.xml里addonupdates 0到2,仍不能访问 systemctl stop firewalld.service systemctl disable firewalld.service 关闭防火墙后，可以访问了。 Mac系统 docker pull linuxserver/kodi-headless docker pull linuxserver/mariadb mkdir /Users/rencc/Kodi docker run -d --restart=\"always\" --net=host --privileged --name=kodi-headless -v /Users/rencc/Kodi:/config/.kodi -p 8080:8080 -p 9777:9777/udp -e PUID=501 -e PGID=20 -e TZ=Asia/Shanghai linuxserver/kodi-headless Docker logs containeridxxxxxxxxxxxx可以看到服务已经启动 ls /Users/rencc/Kodi发现下面已经生成配置文件了 后续可通过如下命令启停 docker stop kodi-headless docker start kodi-headless ","date":"2021-01-20","objectID":"/mysite-public/kodi%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","tags":["Tools"],"title":"Kodi的使用","uri":"/mysite-public/kodi%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"docker pull emby/embyserver # cat emby.sh docker run -d \\ --name embyserver \\ --volume /root/emby/programdata:/config \\ --volume /data/Entbak:/mnt/Entbak \\ --volume /data/Video:/mnt/Video \\ --volume /data/Moives:/mnt/Moives \\ --volume /data/Pictures:/mnt/Pictures \\ --volume /data/Music:/mnt/Music \\ --volume /data/Photos:/mnt/Photos \\ --volume /data/Private:/mnt/Private \\ --volume /data/TV:/mnt/TV \\ --publish 8096:8096 \\ --publish 8920:8920 \\ --env UID=0 \\ --env GID=0 \\ --env GIDLIST=0 \\ docker.io/emby/embyserver:4.1.0.23 # ","date":"2021-01-19","objectID":"/mysite-public/%E5%AE%89%E8%A3%85emby/:0:0","tags":["Tools"],"title":"安装emby","uri":"/mysite-public/%E5%AE%89%E8%A3%85emby/"},{"categories":["Tools"],"content":"0.把用户是公钥导入gitlab；hosts文件加入git服务器解析 Attention: 注意remote url类型 1.在需要保存仓库的父目录下 git init git remote git remote add origin ssh://git@xxx.xxx.xxx:2222/xxx/xxx.git git remote set-url origin ssh://git@xxx.xxx.xxx:2222/xxx/xxx.git git remote -v git config --list git config --global user.email xxx@xxx git config --global user.name xxx git config --list git config --global http.sslVerify false git config --global http.postBuffer 1048576000 git clone ssh://git@xxx.xxx.xxx:2222/xxx/xxx.git git add . git status git commit -m \"comment\" git push origin master 若需添加其他仓库 git remote add gitlab2 https：//xxx.xxx/xxx/xxx.git git remote add github https：//gitee.com/xxx/xxx.git git remote add gitee https：//gitee.com/xxx/xxx.git ","date":"2021-01-19","objectID":"/mysite-public/gitlab%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","tags":["Tools"],"title":"Gitlab的使用","uri":"/mysite-public/gitlab%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tech"],"content":" I am working in an environment where I have an account on multiple linux machines where accounts and passwords are managed independently (no active directory/LDAP/etc) and passwords expire every 30 days. As such, I thought it would be easier to manage my authentication using ssh keys. I am able to authenticate using my ssh keys just fine. However, I found that when my password expires, I am prompted to change my password when I try to connect using my ssh key. Is this normal behavior? I thought the whole point of using key pairs is to bypass using your password. Shouldn’t I only be prompted to change my password if I login using a password? Linux服务器用户的密码有过期设置，需定期修改密码。 凭直觉，可以通过秘钥登录，避免密码过期后，必须修改密码才能进行其他操作,同时也利于编写自动化脚本。 然而,当密码过期后，通过秘钥登录时，也会提示修改密码。 那么问题来了。 这正常吗？使用秘钥登录不是绕过密码? 如果正常，怎么避免使用key登录还提示修改密码？ 答案是正常的。可以通过修改Linux-PAM及pam_unix配置解决。 解决方案： 修改/etc/pam.d/sshd文件。 老配置： account required pam_nologin.so account include password-auth password include password-auth 新配置： account required pam_nologin.so account sufficient pam_unix.so no_pass_expiry account include password-auth password sufficient pam_unix.so no_pass_expiry password include password-auth Reference: Forced to change expired password when using ssh key Expired password and SSH key based login with UsePAM yes PAM 教程 ","date":"2021-01-08","objectID":"/mysite-public/forced-to-change-expired-password-when-using-ssh-key/:0:0","tags":["Linux"],"title":"Forced to Change Expired Password When Using Ssh Key","uri":"/mysite-public/forced-to-change-expired-password-when-using-ssh-key/"},{"categories":["Tools"],"content":"Centos8 配置VNC ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:0","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"安装 TigerVNC server dnf install tigervnc-server ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:1","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"防火墙放行VNC服务 firewall-cmd --add-service=vnc-server --permanent firewall-cmd --reload ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:2","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"配置VNC 用户 vi /etc/tigervnc/vncserver.users 添加用户，如： :1=root ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:3","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"配置分辨率 mkdir $HOME/.vnc vi $HOME/.vnc/config geometry=1920x1080 ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:4","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"设置VNC用户密码 vncpasswd set “view-only password”, press ‘n’ key ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:5","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"启动服务 systemctl enable vncserver@:1 systemctl start vncserver@:1 systemctl status vncserver@:1 ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:6","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"连接到远程设备 vnc viewer xxx.xxx.xxx.xxx:1 ","date":"2020-11-30","objectID":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/:0:7","tags":["Tools"],"title":"Centos8安装VNC","uri":"/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/"},{"categories":["Tools"],"content":"参考 https://www.adamormsby.com/posts/how-to-set-up-a-hugo-site-on-github-pages-with-submodules/ ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:0","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"安装hugo github 下载linux安装包 注意：下载extend版 解压后把二进制文件复制到/usr/bin/ ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:1","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"create new site #### hugo new site [SITE_NAME] hugo new site mysite ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:2","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"github 建新repo Enter the project folder. cd mysite Initialize git locally. git init Set our new Github repo as the remote for our local project #git remote add origin https://github.com/GITHUB_USERNAME/SOURCE_REPO_NAME.git git remote add origin https://github.com/charlesren/mysite.git Stage all files for commit. git add . Commit files. git commit -m \"committing our hugo template\" Push to the remote master git push -u origin master ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:3","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"创建 Live Site Data Repository #git submodule add https://github.com/GITHUB_USERNAME/PUBLIC_REPO_NAME.git public git submodule add https://github.com/charlesren/mysite-public.git public 删除原public目录下文件 rm -rf ./public/* Perform a site build and output to ‘public/’ directory. hugo cd public git add . git commit -m \"first build\" Return to the project root. cd ../ commit change git add . git commit -m \"first build - update submodule reference\" Push the source project and the public submodule to Github together. git push -u origin master --recurse-submodules=on-demand ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:4","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"Add a Theme to Our Site Make a fork of the Hello Friend theme so we have our own copy of it. 这里fork https://github.com/dillonzq/LoveIt fork 后地址： https://github.com/charlesren/LoveIt Add our forked repo as a submodule in our main project’s themes folder. Add the theme submodule from the root project folder my sample URL - https://github.com/aormsby/F-hugo-theme-hello-friend.git git submodule add https://github.com/GITHUB_USERNAME/FORKED_THEME_REPO_NAME.git themes/hello-friend git submodule add https://github.com/charlesren/LoveIt.git themes/LoveIt 修改config.toml cp themes/LoveIt/exampleSite/config.toml . sed -i 's/^themesDir = .*/themesDir = \"themes\"/' config.toml # Because we’re making a Github ‘project site’ we want to change thebaseURL to match our project URL. ##baseURL = [GITHUB_USER_NAME].github.io/[PROJECT_NAME] #实际URL 为 baseURL = https://charlesren.github.io/mysite-public/ sed -i 's|^baseURL = .*|baseURL = \"https://charlesren.github.io/mysite-public/\"|' config.toml sed -i 's|^title = .*|title = \"CharlesRen\"|' config.toml sed -i 's|Email = \"xxxx@xxxx.com\".*|Email = \"renccn@gmail.com\"|g' config.toml sed -i 's|Email = \"xxxx@xxxx.com\".*|Email = \"renccn@gmail.com\"|g' config.toml ## subtitle = \"Focus on Cloud Native,Golang,Speculate in Stocks\" ## subtitle = \"专注于云原生、Go语言、股票投机\" # Header config name = \"CharlesRen\" ## [author] name = \"CharlesRen\" email = \"renccn@gmail.com\" link = \"https://charlesren.github.io/mysite-public/\" ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:5","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"Test Site and Deploy hugo cd public git add . git commit -m \"build with theme\" cd ../ git add . git commit -m \"build with theme - update submodule reference\" git push -u origin master --recurse-submodules=on-demand 至此站点已完成，但没有内容 ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:6","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"添加about页 hugo new about.md vi content/about.md 注意：生成静态网站时，hugo会忽略所有通过 draft: true 标记为草稿的文件。必须改为 draft: false 才会编译进 HTML 文件。 否则，生成的网站没有文章 ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:7","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"添加其他posts hugo new posts/fistPage.md 注意：生成静态网站时，hugo会忽略所有通过 draft: true 标记为草稿的文件。必须改为 draft: false 才会编译进 HTML 文件。 否则，生成的网站没有文章 ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:8","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"categories":["Tools"],"content":"问题 问题一 Error: Error building site: failed to render pages: render of “page” failed: execute of template failed: template: _default/single.html:18:124: executing “content” at \u003cpartial “function/content.html”\u003e: error calling partial: “/data/mysite/themes/LoveIt/layouts/partials/function/content.html:4:19”: execute of template failed: template: partials/function/content.html:4:19: executing “partials/function/content.html” at \u003cpartial “function/ruby.html” $content\u003e: error calling partial: partial that returns a value needs a non-zero argument. 解决方案 ： https://github.com/dillonzq/LoveIt/pull/519/files 问题二 about页面不显示 解决方案:config.toml写绝对地址 问题三 文章自动分类到标签、分类、文档 解决方案：文章前加tags\\ categories ---title:\"Firstpg\"date:2020-11-26T16:45:15+08:00draft:falsetags:[\"cncf\"]categories:[\"cncf\",\"documentation\"]--- 如已建站，在别的设备上只需clone main project 时指定同时clone submodule 即可 git clone git@github.com:charlesren/mysite.git --recurse-submodules ","date":"2020-11-26","objectID":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/:0:9","tags":["Tools"],"title":"hugo的使用","uri":"/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/"}]