<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tools - Tag - CharlesRen</title>
        <link>https://charlesren.github.io/mysite-public/tags/tools/</link>
        <description>Tools - Tag - CharlesRen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>renccn@gmail.com (CharlesRen)</managingEditor>
            <webMaster>renccn@gmail.com (CharlesRen)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 23 Feb 2021 10:42:13 &#43;0800</lastBuildDate><atom:link href="https://charlesren.github.io/mysite-public/tags/tools/" rel="self" type="application/rss+xml" /><item>
    <title>Deploy Yugabyte On K8s</title>
    <link>https://charlesren.github.io/mysite-public/deploy-yugabyte-on-k8s/</link>
    <pubDate>Tue, 23 Feb 2021 10:42:13 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/deploy-yugabyte-on-k8s/</guid>
    <description><![CDATA[添加helm repo 1 2 3  helm repo add yugabytedb https://charts.yugabyte.com helm repo update helm search repo yugabytedb/yugabyte   准备docker image docker pull yugabytedb/yugabyte:2.5.1.0-b153
 kind 集群需导入镜像
 kind load yugabytedb/yugabyte:2.5.1.0-b153 &ndash;name yugabyte
部署yugabyte 1 2  kubectl create namespace yb-demo helm install yb-demo yugabytedb/yugabyte --namespace yb-demo --wait   Check cluster status with kubectl 1 2  kubectl --namespace yb-demo get pods kubectl --namespace yb-demo get services   Check cluster status with Admin UI 1  kubectl --namespace yb-demo port-forward --address 0.]]></description>
</item><item>
    <title>Centos8工作环境配置</title>
    <link>https://charlesren.github.io/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 22 Feb 2021 09:19:56 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[配置网络 查看并连接设备 nmcli d
nmcli d connect xxx
查看并配置连接 nmcli c
nmcli c modify ens192 ipv4.address x.x.x.x/24 ipv4.gateway x.x.x.x ipv4.dns 8.8.8.8 ipv4.method manual connection.autoconnect yes
 114.114.114.114 cat not resolve gcr.io etc, but 8.8.8.8 can
 启用连接 nmcli c reload
nmcli c up xxx
Centos8 源设置 1  dnf config-manager --add-repo https://mirrors.aliyun.com/repo/Centos-8.repo   安装docker 安装docker 1 2 3  dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf repolist -v dnf install -y docker-ce --nobest --allowerasing   设置国内源 vim /etc/docker/daemon.]]></description>
</item><item>
    <title>ASUS ROG STRIX Z390 I GAMING Hakintosh</title>
    <link>https://charlesren.github.io/mysite-public/asus-rog-strix-z390-i-gaming-hakintosh/</link>
    <pubDate>Wed, 20 Jan 2021 10:50:53 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/asus-rog-strix-z390-i-gaming-hakintosh/</guid>
    <description><![CDATA[配置如下: 散热 海盗船h60 378.9 电源 海盗船sf600 698.9 机箱 追风者217e 700 主板 华硕rog z390i 1869 显示器 dell2419 1498.5
硬盘 三星970evo500g 879
硅脂 猫头鹰nt-h1 18.9
cpu 9700k散片 2459 无线网卡 dell dw1560（bcm94352z） 185S
键盘鼠标自备 内存 同事闲置
注意事项：  系统安装：第一阶段通过u盘安装到硬盘。安装过程中会重启，此时需按热键选择启动设备（asus 为F8） ，选择通过u盘启动，在引导界面选择硬盘名称，完成第二阶段安装。第二阶段安装完成后使用multibeast\ kextbeast\ clover configurator \clever等工具安装clever及驱动，完成post Installation. clover configurator已能自动升级clover ,升级kexts kextBeast使用方法:把kext文件放到桌面，然后运行kentbeast程序即可. 升级EFI时：backup your existing, working EFI folder. Copy/paste your Serial, Board Serial, UUID, and Memory settings to the new config.plist. drivers64uefi 放一些启动时的驱动，比如apfs **删除kext:**delete the extra kext from /Library/Extensions, then do a rebuild of your kextcache using this command in terminal:sudo kextcache -i / sudo kextstat kext utility 解决权限问题，重建缓存  工具：  unibeast (tonymacx86) multibeast (tonymacx86) kextbeast (tonymacx86) kent utility Clover Configurator (tonymacx86) geekbench hackintool 原intel FB Patcher  文件：  clover （tonymacx86） kexts (tonymacx86 &hellip;) SSDT-UIAC.]]></description>
</item><item>
    <title>Kodi的使用</title>
    <link>https://charlesren.github.io/mysite-public/kodi%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Wed, 20 Jan 2021 09:07:43 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/kodi%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[celedhrim版kodi-server centos 系统 1 2  docker pull celedhrim/kodi-server docker run -d --restart=&#34;always&#34; --net=host --privileged -v /tmp/kodi:/opt/kodi-server/share/kodi/portable_data celedhrim/kodi-server   不加&ndash;privileged 容器会不断重启,docker logs显示
 Could not init logging classes. Log folder error (/opt/kodi-server/share/kodi/portable_data/temp/) ERROR: Unable to create application. Exiting
 Attention: /tmp/kodi换成要保存kodi配置文件的目录
linuxserver.io headless版 centos系统 有问题上linuxserver.io论坛找;unraid论坛forums.lime-technology.com也有相关的东西;
好处：
 配置和程序分离，方便升级版本； 库由mysql/mariadb集中管理，每个docker kodi instances都从db里获取信息，库更新后，都能看到一样的东西； 在一个客户端操作后，或更新文件后，所有客户端能看到最新状态，比如tv看到多少分钟停下的；  Attention: 不要docker clean library ，通过任意一个clinet做
1 2 3  docker pull linuxserver/kodi-headless mkdir /root/kodi docker run -d --restart=&#34;always&#34; --net=host --privileged --name=kodi-headless -v /root/kodi:/config/.]]></description>
</item><item>
    <title>安装emby</title>
    <link>https://charlesren.github.io/mysite-public/%E5%AE%89%E8%A3%85emby/</link>
    <pubDate>Tue, 19 Jan 2021 17:07:06 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/%E5%AE%89%E8%A3%85emby/</guid>
    <description><![CDATA[docker pull emby/embyserver
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  # cat emby.sh docker run -d \ --name embyserver \ --volume /root/emby/programdata:/config \ --volume /data/Entbak:/mnt/Entbak \ --volume /data/Video:/mnt/Video \ --volume /data/Moives:/mnt/Moives \ --volume /data/Pictures:/mnt/Pictures \ --volume /data/Music:/mnt/Music \ --volume /data/Photos:/mnt/Photos \ --volume /data/Private:/mnt/Private \ --volume /data/TV:/mnt/TV \ --publish 8096:8096 \ --publish 8920:8920 \ --env UID=0 \ --env GID=0 \ --env GIDLIST=0 \ docker.]]></description>
</item><item>
    <title>Gitlab的使用</title>
    <link>https://charlesren.github.io/mysite-public/gitlab%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Tue, 19 Jan 2021 16:09:22 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/gitlab%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[0.把用户是公钥导入gitlab；hosts文件加入git服务器解析 Attention: 注意remote url类型
1.在需要保存仓库的父目录下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  git init git remote git remote add origin ssh://git@xxx.xxx.xxx:2222/xxx/xxx.git git remote set-url origin ssh://git@xxx.xxx.xxx:2222/xxx/xxx.git git remote -v git config --list git config --global user.email xxx@xxx git config --global user.name xxx git config --list git config --global http.]]></description>
</item><item>
    <title>Centos8安装VNC</title>
    <link>https://charlesren.github.io/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/</link>
    <pubDate>Mon, 30 Nov 2020 16:52:55 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/centos8%E5%AE%89%E8%A3%85vnc/</guid>
    <description><![CDATA[Centos8 配置VNC
安装 TigerVNC server 1  dnf install tigervnc-server   防火墙放行VNC服务 1 2 3  firewall-cmd --add-service=vnc-server --permanent firewall-cmd --reload   配置VNC 用户 vi /etc/tigervnc/vncserver.users
添加用户，如：
:1=root
配置分辨率 mkdir $HOME/.vnc
vi $HOME/.vnc/config
1  geometry=1920x1080   设置VNC用户密码 1  vncpasswd   set “view-only password”, press ‘n’ key
启动服务 1 2 3  systemctl enable vncserver@:1 systemctl start vncserver@:1 systemctl status vncserver@:1   连接到远程设备 vnc viewer]]></description>
</item><item>
    <title>hugo的使用</title>
    <link>https://charlesren.github.io/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Thu, 26 Nov 2020 16:45:15 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/hugo%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[参考 https://www.adamormsby.com/posts/how-to-set-up-a-hugo-site-on-github-pages-with-submodules/
安装hugo  github 下载linux安装包  注意：下载extend版
解压后把二进制文件复制到/usr/bin/  create new site 1 2  #### hugo new site <sup>SITE_NAME] hugo new site mysite   github 建新repo Enter the project folder. 1  cd mysite   Initialize git locally. 1  git init   Set our new Github repo as the remote for our local project 1 2  #git remote add origin https://github.com/[GITHUB_USERNAME</sup>/<sub>SOURCE_REPO_NAME</sub>.git git remote add origin https://github.]]></description>
</item></channel>
</rss>
