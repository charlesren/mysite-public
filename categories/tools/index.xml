<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tools - Category - CharlesRen</title>
        <link>https://charlesren.github.io/mysite-public/categories/tools/</link>
        <description>Tools - Category - CharlesRen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>renccn@gmail.com (CharlesRen)</managingEditor>
            <webMaster>renccn@gmail.com (CharlesRen)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 14 Apr 2021 16:35:47 &#43;0800</lastBuildDate><atom:link href="https://charlesren.github.io/mysite-public/categories/tools/" rel="self" type="application/rss+xml" /><item>
    <title>Nats的使用</title>
    <link>https://charlesren.github.io/mysite-public/nats%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Wed, 14 Apr 2021 16:35:47 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/nats%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[单机部署参考NATS Docker tutorial
集群部署参考nats_docker
单机部署 下载镜像 1  docker pull nats   启动服务 1  docker run -p 4222:4222 -p 8222:8222 -p 6222:6222 --name nats-server -d nats:latest   查看服务 通过 http://localhost:8222 查看服务状态]]></description>
</item><item>
    <title>Grafana的安装及使用</title>
    <link>https://charlesren.github.io/mysite-public/grafana%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
    <pubDate>Thu, 18 Mar 2021 08:45:37 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/grafana%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
    <description><![CDATA[安装 1  docker pull grafana/grafana   准备存储空间 1  mkdir -p /data/grafana   启动 1  docker run -d -p 3000:3000 -v /data/grafana:/var/lib/grafana --name grafana grafana/grafana   登录 浏览器访问http://localhost:3000/login
 默认用户名密码为: admin/admin
参考Configure a Grafana Docker image
 安装ClickHouse plugins  参考https://grafana.com/grafana/plugins/vertamedia-clickhouse-datasource/
 1 2 3 4  docker exec -it grafana /bin/bash grafana-cli plugins install vertamedia-clickhouse-datasource exit docker restart grafana   配置数据源 Configuration &gt; Data Sources &gt; Add data source]]></description>
</item><item>
    <title>容器化部署Clickhouse及Tabix</title>
    <link>https://charlesren.github.io/mysite-public/%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2clickhouse%E5%8F%8Atabix/</link>
    <pubDate>Wed, 10 Mar 2021 16:07:54 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2clickhouse%E5%8F%8Atabix/</guid>
    <description><![CDATA[下载镜像 1  docker pull yandex/clickhouse-server   准备数据目录  clickhouse server 重要目录介绍
数据文件: /var/lib/clickhouse
配置文件: /etc/clickhouse-sever
日志文件: /var/log/clickhouse-server
 以/data为外接存储为例,新建数据目录
1  mkdir -p /data/clickhouse   启动clickhouse数据库 1 2 3 4 5 6 7  docker run -d --name clickhouse-server \ --ulimit nofile=262144:262144 \ --volume=/data/clickhouse:/var/lib/clickhouse \ -p 8123:8123 \ -p 9000:9000 \ -p 9009:9009 \ yandex/clickhouse-server   新建数据库用户  clickhouse默认账号为default,密码为空
本示例新建名为clickhouse的用户
容器内无vim命令
 准备用户配置文件模板 1  docker cp clickhouse-server:/etc/clickhouse-server/users.]]></description>
</item><item>
    <title>Asus Z390i 9700k Hackintosh With OpenCore</title>
    <link>https://charlesren.github.io/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/</link>
    <pubDate>Thu, 04 Mar 2021 17:39:57 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/asus-z390i-9700k-hackintosh-with-opencore/</guid>
    <description><![CDATA[硬件配置    配件 型号 价格     散热 海盗船h60 378.9   电源 海盗船sf600 698.9   机箱 追风者217e 700   主板 华硕rog z390i 1869   显示器 dell2419 1498.5   硬盘 三星970evo500g 879   硅脂 猫头鹰nt-h1 18.9   cpu 9700k Coffee Lake Refresh 630核显 FCLGA1151 2459   无线网卡 dell dw1560（bcm94352z） 185   内存 USCORSAIR 32GB(16x2) DDR4 3200 复仇者LPX系列    键盘 高斯 GS87D    鼠标 Apple Trackpad 2     参考文档 OpenCore Install Guide]]></description>
</item><item>
    <title>Aria2 on Docker</title>
    <link>https://charlesren.github.io/mysite-public/aria2-on-docker/</link>
    <pubDate>Wed, 03 Mar 2021 16:17:13 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/aria2-on-docker/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  [root@192 conf]# cat aria2.sh #mkdir -p ~/aria2/conf #cd ~/aria2/conf #touch aria2.conf #touch aria2.session #touch aria2.session #touch dht.dat #touch dht6.dat docker run -d \ --name aria2-with-webui \ -p 6800:6800 \ -p 6880:80 \ -v /data/Downloads:/data \ -v ~/aria2/conf:/conf \ -e PGID=0 \ -e PUID=0 \ abcminiuser/docker-aria2-with-webui:latest-ng   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  [root@192 conf]# cat aria2.]]></description>
</item><item>
    <title>Plex on Docker</title>
    <link>https://charlesren.github.io/mysite-public/plex-on-docker/</link>
    <pubDate>Wed, 03 Mar 2021 16:07:25 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/plex-on-docker/</guid>
    <description><![CDATA[1  docker run -d --restart=always --net=host --privileged --name plex -h rencc -v /Users/rencc/Plex:/config -v /Users/rencc/Downloads:/data -p 32400:32400 -e PUID=501 -e PGID=20 -e TZ=Asia/Shanghai linuxserver/plex   ]]></description>
</item><item>
    <title>Gitlab容器化部署</title>
    <link>https://charlesren.github.io/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</link>
    <pubDate>Wed, 03 Mar 2021 15:39:39 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/gitlab%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</guid>
    <description><![CDATA[OS: Redhat 7.6
0：Docker 安装 需要如下4个安装包。（container-selinux取代老版本docker-selinux）
 docker-ce-18.09.0-3.el7.x86_64.rpm containerd.io-1.2.0-3.el7.x86_64.rpm docker-ce-cli-18.09.0-3.el7.x86_64.rpm container-selinux-2.74-1.el7.noarch.rpm  1.gitlab 镜像准备 外网下载镜像
1 2  docker save -o gitlab.tar gitlab:latest docker load -i gitlab.tar   2.建gitlab用户 3.持久化存储准备 准备存储挂载到/data下。
新建gitlab/config gitlab/logs gitlab/data三个文件夹
4.gitlab用户启动容器 1 2 3 4 5 6 7 8 9  sudo docker run --detach \ --hostname gitlab.XXXXXX.cn \ --publish 443:443 --publish 80:80 --publish 2222:22 \ --name gitlab \ --restart always \ --volume /data/gitlab/config:/etc/gitlab \ --volume /data/gitlab/logs:/var/log/gitlab \ --volume /data/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest    注意]]></description>
</item><item>
    <title>Deploy Yugabyte On K8s</title>
    <link>https://charlesren.github.io/mysite-public/deploy-yugabyte-on-k8s/</link>
    <pubDate>Tue, 23 Feb 2021 10:42:13 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/deploy-yugabyte-on-k8s/</guid>
    <description><![CDATA[添加helm repo 1 2 3  helm repo add yugabytedb https://charts.yugabyte.com helm repo update helm search repo yugabytedb/yugabyte   准备docker image docker pull yugabytedb/yugabyte:2.5.1.0-b153
 kind 集群需导入镜像
 kind load yugabytedb/yugabyte:2.5.1.0-b153 &ndash;name yugabyte
部署yugabyte 1 2  kubectl create namespace yb-demo helm install yb-demo yugabytedb/yugabyte --namespace yb-demo --wait   Check cluster status with kubectl 1 2  kubectl --namespace yb-demo get pods kubectl --namespace yb-demo get services   Check cluster status with Admin UI 1  kubectl --namespace yb-demo port-forward --address 0.]]></description>
</item><item>
    <title>Centos8工作环境配置</title>
    <link>https://charlesren.github.io/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 22 Feb 2021 09:19:56 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/centos8%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[配置网络 查看并连接设备 nmcli d
nmcli d connect xxx
查看并配置连接 nmcli c
nmcli c modify ens192 ipv4.address x.x.x.x/24 ipv4.gateway x.x.x.x ipv4.dns 8.8.8.8 ipv4.method manual connection.autoconnect yes
 114.114.114.114 cat not resolve gcr.io etc, but 8.8.8.8 can
 启用连接 nmcli c reload
nmcli c up xxx
Centos8 源设置 1  dnf config-manager --add-repo https://mirrors.aliyun.com/repo/Centos-8.repo   安装docker 安装docker 1 2 3  dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf repolist -v dnf install -y docker-ce --nobest --allowerasing   设置国内源 vim /etc/docker/daemon.]]></description>
</item><item>
    <title>ASUS ROG STRIX Z390 I GAMING Hakintosh</title>
    <link>https://charlesren.github.io/mysite-public/asus-rog-strix-z390-i-gaming-hakintosh/</link>
    <pubDate>Wed, 20 Jan 2021 10:50:53 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/asus-rog-strix-z390-i-gaming-hakintosh/</guid>
    <description><![CDATA[配置如下: 散热 海盗船h60 378.9 电源 海盗船sf600 698.9 机箱 追风者217e 700 主板 华硕rog z390i 1869 显示器 dell2419 1498.5
硬盘 三星970evo500g 879
硅脂 猫头鹰nt-h1 18.9
cpu 9700k散片 2459 无线网卡 dell dw1560（bcm94352z） 185S
键盘鼠标自备 内存 同事闲置
注意事项：  系统安装：第一阶段通过u盘安装到硬盘。安装过程中会重启，此时需按热键选择启动设备（asus 为F8） ，选择通过u盘启动，在引导界面选择硬盘名称，完成第二阶段安装。第二阶段安装完成后使用multibeast\ kextbeast\ clover configurator \clever等工具安装clever及驱动，完成post Installation. clover configurator已能自动升级clover ,升级kexts kextBeast使用方法:把kext文件放到桌面，然后运行kentbeast程序即可. 升级EFI时：backup your existing, working EFI folder. Copy/paste your Serial, Board Serial, UUID, and Memory settings to the new config.plist. drivers64uefi 放一些启动时的驱动，比如apfs **删除kext:**delete the extra kext from /Library/Extensions, then do a rebuild of your kextcache using this command in terminal:sudo kextcache -i / sudo kextstat kext utility 解决权限问题，重建缓存  工具：  unibeast (tonymacx86) multibeast (tonymacx86) kextbeast (tonymacx86) kent utility Clover Configurator (tonymacx86) geekbench hackintool 原intel FB Patcher  文件：  clover （tonymacx86） kexts (tonymacx86 &hellip;) SSDT-UIAC.]]></description>
</item></channel>
</rss>
