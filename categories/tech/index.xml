<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tech - Category - CharlesRen</title>
        <link>https://charlesren.github.io/mysite-public/categories/tech/</link>
        <description>Tech - Category - CharlesRen</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>renccn@gmail.com (CharlesRen)</managingEditor>
            <webMaster>renccn@gmail.com (CharlesRen)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 09 Mar 2021 14:47:50 &#43;0800</lastBuildDate><atom:link href="https://charlesren.github.io/mysite-public/categories/tech/" rel="self" type="application/rss+xml" /><item>
    <title>Centos使用ZFS文件系统</title>
    <link>https://charlesren.github.io/mysite-public/centos%E4%BD%BF%E7%94%A8zfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Tue, 09 Mar 2021 14:47:50 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/centos%E4%BD%BF%E7%94%A8zfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
    <description><![CDATA[安装epel，zfs仓库 epel可以使用中科院开源软件协会等
mirrors.opencas.cn
keys不用管，安装库里软件时会提示import
安装zfs 1  yum install zfs   kernel-devel等会自动安装
内核加载zfs模块 提示zfs not found
重启系统（dmks staus显示added，没有安装）
重启后变为installed
modprobe zfs
导入pool
升级pool
正常使用
重启后自动import crontab 加如下内容
1  @reboot sleep 30；/sbin/zpool import data   1 2 3 4  zfs get sharenfs systemctl start rpcbind systemctl enable nfs systemctl start nfs   共享设置 vi /etc/exports
/data/Downloads 192.168.2.0/24（rw，no_root_squash，sync）后来又加上insecure 不加macmount不上
mac上远程挂载 1  mount -t nfs 192.168.2.215/data/Downloads /data/Downloads   zfs set sharesmb=on data]]></description>
</item><item>
    <title>Nginx&#43;keepalived实现apiserver高可用</title>
    <link>https://charlesren.github.io/mysite-public/nginx-keepalived%E5%AE%9E%E7%8E%B0apiserver%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
    <pubDate>Tue, 09 Mar 2021 14:41:07 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/nginx-keepalived%E5%AE%9E%E7%8E%B0apiserver%E9%AB%98%E5%8F%AF%E7%94%A8/</guid>
    <description><![CDATA[cat /etc/keepalived/keepalived.conf
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  global_defs { router_id nginx_apiserver__test } vrrp_script chk_nginx { script &#34;/etc/keepalived/check_nginx.sh&#34; interval 5 weight 2 } vrrp_instance VI_1 { state BACKUP interface ens192 virtual_router_id 51 priority 99 advert_int 1 authentication { auth_type PASS auth_pass 1111 } virtual_ipaddress { 1.1.1.1/24 } }   check_nginx.sh 脚本内容]]></description>
</item><item>
    <title>新建用户且home目录在存储上</title>
    <link>https://charlesren.github.io/mysite-public/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%94home%E7%9B%AE%E5%BD%95%E5%9C%A8%E5%AD%98%E5%82%A8%E4%B8%8A/</link>
    <pubDate>Tue, 09 Mar 2021 14:37:31 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E4%B8%94home%E7%9B%AE%E5%BD%95%E5%9C%A8%E5%AD%98%E5%82%A8%E4%B8%8A/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  groupadd -g 1100 xprice useradd -u 1101 -g 1100 -d /tmp/xprice xprice umount /data mkdir /home/xprice mount -a chown xprice:xprice /home/xprice chmod 750 /home/xprice usermod -m -d /home/xprice xprice cp /tmp/xprice/.* /home/xprice/ passwd xprice 或可尝试 groupadd -g 1100 xprice useradd -u 1101 -g 1100 -M xprice umount /data mkdir /home/xprice mount -a chown xprice:xprice /home/xprice chmod 750 /home/xprice usermod -d /home/xprice xprice passwd xprice 未验证如下tips http://blog.]]></description>
</item><item>
    <title>Centos7.6离线安装docker</title>
    <link>https://charlesren.github.io/mysite-public/centos7.6%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</link>
    <pubDate>Tue, 09 Mar 2021 14:10:26 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/centos7.6%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</guid>
    <description><![CDATA[1、安装环境：
系统：CentOS Linux release 7.6.1810 (Core)
Docker版本：18.09.8
2、下载离线安装包
docker
依赖包下载：
containerd.io
docker-ce-cli
container-selinux
3、安装
1 2 3 4  rpm -ivh docker-ce-cli-18.09.8-3.el7.x86_64.rpm rpm -ivh container-selinux-2.107-3.el7.noarch.rpm rpm -ivh containerd.io-1.2.2-3.el7.x86_64.rpm rpm -ivh docker-ce-18.09.8-3.el7.x86_64.rpm   ]]></description>
</item><item>
    <title>Yum源的使用方法</title>
    <link>https://charlesren.github.io/mysite-public/yum%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link>
    <pubDate>Tue, 09 Mar 2021 11:30:03 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/yum%E6%BA%90%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  ##################################### ##################################### ####### YUM 使用方法 （仅redhat 6.2) ########## ##################################### ##################################### # 在客户机/etc/yum.repos.d/下面新建rhel-media.repo文件 # rhel-media.repo文件内容如下： [rhel-media] name=Red Hat Enterprise Linux 6.2 baseurl=http://1.1.1.1 #baseurl=file:///media/cdrom #/media/cdrom为光盘的mountpoint enabled=1 gpgcheck=0 #gpgkey=file:///media/rhel/RPM-GPG-KEY-redhat-release # 在命令行下 yum install 应用名 即可安装 ######################################### #####使用本地源############################# ####根据源的不同可分为两种情况 ########### 用光驱中的光盘做源 #第一步： mkdir /media/cdrom #第二步： mount /dev/sr0 /media/cdrom #第三步： 把rhel-media.]]></description>
</item><item>
    <title>Centos连接存储</title>
    <link>https://charlesren.github.io/mysite-public/centos%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/</link>
    <pubDate>Tue, 09 Mar 2021 10:30:26 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/centos%E8%BF%9E%E6%8E%A5%E5%AD%98%E5%82%A8/</guid>
    <description><![CDATA[device-mapper 检查是否安装多路径软件包 device-mapper device-mapper-multipath
1  rpm -qa |grep device-mapper   安装device-mapper, device-mapper-multipath
1  yum install -y device-mapper device-mapper-multipath   生成多路径配置文件
1  mpathconf --enable   说明：生成配置文件是/etc/multipath.conf
修改配置文件
1 2 3 4 5 6 7 8 9 10  vim /etc/multipath.conf #blacklist { #devnode &#34;*&#34; #} defaults { user_friendly_names yes path_grouping_policy multibus failback immediate no_path_retry fail }    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  在默认配置下，LVM对所有磁盘进行扫描，以确定哪一块上面包含PV。如果使用了device-mapper-multipath或其他多路径软件如 EMC PowerPath 或Hitachi Dynamic Link Manager (HDLM)，那么对于每一个LUN的每一条路径就注册成为一个不同的SCSI设备。如/dev/sdb， /dev/sdc，等等。多路径软件之后会创建一个新的设备映射到这些路径如：/dev/mapper/mpath1 (device-mapper-multipath)， /dev/emcpowerb (EMC PowerPath)，或 /dev/sddlmab (HDLM)。由于每一个设备都指向同一个LUN，所以它们都包含相同的LVM元数据，因此在扫描时显示为duplicate。运行任何LVM命令，都会出现你所说的告警。 With a default configuration, LVM commands will scan for devices in /dev, and check every resulting device for LVM metadata.]]></description>
</item><item>
    <title>Nmon生成系统性能监控文件</title>
    <link>https://charlesren.github.io/mysite-public/nmon%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6/</link>
    <pubDate>Tue, 09 Mar 2021 08:47:13 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/nmon%E7%94%9F%E6%88%90%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E6%96%87%E4%BB%B6/</guid>
    <description><![CDATA[用nmon命令生成系统性能监控文件
为了查看系统在一段时间内的性能，我们可以借助系统自身提供的性能监控命令来生成一份性能监控日志，然后用nmon analyser小软件来生成图形化的监控界面.
在aix操作系统下，用root 用户执行如下命令：
1  nmon -f -s 30 –c 2880 -m /tmp   系统每隔30秒，总共2880次监控性能，生成的文件存放在/tmp目录下。
topas
系统自动保存topas文件，可以转为csv文件，用nmon工具分析。文件在/etc/perf/daily目录下
topas文件可通过topasout -a xxxxx.topas 转化为csv文件]]></description>
</item><item>
    <title>Aix挂载光盘镜像</title>
    <link>https://charlesren.github.io/mysite-public/aix%E6%8C%82%E8%BD%BD%E5%85%89%E7%9B%98%E9%95%9C%E5%83%8F/</link>
    <pubDate>Tue, 09 Mar 2021 08:35:16 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/aix%E6%8C%82%E8%BD%BD%E5%85%89%E7%9B%98%E9%95%9C%E5%83%8F/</guid>
    <description><![CDATA[AIX 6.1 TL 4开始，AIX系统提供了一个loopmount命令，可直接mount ISO文件
挂载点是目录，不要用建立的文件系统做挂载点
挂镜像文件:
1  loopmount -i PowerHA6.1.iso -o &#34;-V cdrfs -o ro&#34; -m /mnt   挂光驱：
1  mount -rv cdrfs /dev/cd0 /mnt   AIX 6.1 TL4之前系统步骤示例如下：
一：建立一个和iso文件差不多大小的裸设备。
1  mklv -y is0_lv datavg 10   二：用dd命令把iso文件写到这个裸设备上，
1  dd if=test_unix_mount_iso.iso of=/dev/iso_lv bs=10M   三：mount
1  mount -rv cdrfs /dev/iso_lv /mnt   这样，在mnt下就是iso文件的内容了。]]></description>
</item><item>
    <title>Linux添加特权用户</title>
    <link>https://charlesren.github.io/mysite-public/linux%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7/</link>
    <pubDate>Thu, 04 Mar 2021 17:07:43 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/linux%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%9D%83%E7%94%A8%E6%88%B7/</guid>
    <description><![CDATA[在unix linux 系统中，系统通过uid 识别用户。
root 用户uid=0 gid=0，root用户是唯一的。
若其他用户与root用户uid,gid相同，就会有root权限。
下面根据操作系统不同，举例说明如何建立特权用户。
Redhat Linux： 实验如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  [root@localhost ~]# id root uid=0(root) gid=0(root) 组=0(root) [root@localhost ~]# [root@localhost ~]# cat /etc/passwd root❌0:0:root:/root:/bin/bash bin❌1:1:bin:/bin:/sbin/nologin daemon❌2:2:daemon:/sbin:/sbin/nologin adm❌3:4:adm:/var/adm:/sbin/nologin lp❌4:7:lp:/var/spool/lpd:/sbin/nologin sync❌5:0:sync:/sbin:/bin/sync shutdown❌6:0:shutdown:/sbin:/sbin/shutdown halt❌7:0:halt:/sbin:/sbin/halt mail❌8:12:mail:/var/spool/mail:/sbin/nologin uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin operator❌11:0:operator:/root:/sbin/nologin games❌12💯games:/usr/games:/sbin/nologin gopher❌13:30:gopher:/var/gopher:/sbin/nologin ftp❌14:50:FTP User:/var/ftp:/sbin/nologin nobody❌99:99:Nobody:/:/sbin/nologin dbus❌81:81:System message bus:/:/sbin/nologin usbmuxd❌113:113:usbmuxd user:/:/sbin/nologin rpc❌32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin oprofile❌16:16:Special user account to be used by OProfile:/home/oprofile:/sbin/nologin vcsa❌69:69:virtual console memory owner:/dev:/sbin/nologin rtkit❌499:497:RealtimeKit:/proc:/sbin/nologin abrt❌173:173::/etc/abrt:/sbin/nologin hsqldb❌96:96::/var/lib/hsqldb:/sbin/nologin avahi-autoipd❌170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin saslauth❌498:76:&#34;Saslauthd user&#34;:/var/empty/saslauth:/sbin/nologin rpcuser❌29:29:RPC Service User:/var/lib/nfs:/sbin/nologin nfsnobody❌65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin postfix❌89:89::/var/spool/postfix:/sbin/nologin haldaemon❌68:68:HAL daemon:/:/sbin/nologin gdm❌42:42::/var/lib/gdm:/sbin/nologin ntp❌38:38::/etc/ntp:/sbin/nologin apache❌48:48:Apache:/var/www:/sbin/nologin radvd❌75:75:radvd user:/:/sbin/nologin qemu❌107:107:qemu user:/:/sbin/nologin pulse❌497:495:PulseAudio System Daemon:/var/run/pulse:/sbin/nologin sshd❌74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin tcpdump❌72:72::/:/sbin/nologin weblogic❌500:500::/home/weblogic:/bin/bash [root@localhost ~]# [root@localhost ~]# [root@localhost ~]# useradd -u 0 -g 0 test uservi useradd: UID 0 is not unique [root@localhost ~]# [root@localhost ~]# [root@localhost ~]# useradd -o -u 0 -g 0 testuser [root@localhost ~]# [root@localhost ~]# cat /etc/passwd root❌0:0:root:/root:/bin/bash bin❌1:1:bin:/bin:/sbin/nologin daemon❌2:2:daemon:/sbin:/sbin/nologin adm❌3:4:adm:/var/adm:/sbin/nologin lp❌4:7:lp:/var/spool/lpd:/sbin/nologin sync❌5:0:sync:/sbin:/bin/sync shutdown❌6:0:shutdown:/sbin:/sbin/shutdown halt❌7:0:halt:/sbin:/sbin/halt mail❌8:12:mail:/var/spool/mail:/sbin/nologin uucp❌10:14:uucp:/var/spool/uucp:/sbin/nologin operator❌11:0:operator:/root:/sbin/nologin games❌12💯games:/usr/games:/sbin/nologin gopher❌13:30:gopher:/var/gopher:/sbin/nologin ftp❌14:50:FTP User:/var/ftp:/sbin/nologin nobody❌99:99:Nobody:/:/sbin/nologin dbus❌81:81:System message bus:/:/sbin/nologin usbmuxd❌113:113:usbmuxd user:/:/sbin/nologin rpc❌32:32:Rpcbind Daemon:/var/cache/rpcbind:/sbin/nologin oprofile❌16:16:Special user account to be used by OProfile:/home/oprofile:/sbin/nologin vcsa❌69:69:virtual console memory owner:/dev:/sbin/nologin rtkit❌499:497:RealtimeKit:/proc:/sbin/nologin abrt❌173:173::/etc/abrt:/sbin/nologin hsqldb❌96:96::/var/lib/hsqldb:/sbin/nologin avahi-autoipd❌170:170:Avahi IPv4LL Stack:/var/lib/avahi-autoipd:/sbin/nologin saslauth❌498:76:&#34;Saslauthd user&#34;:/var/empty/saslauth:/sbin/nologin rpcuser❌29:29:RPC Service User:/var/lib/nfs:/sbin/nologin nfsnobody❌65534:65534:Anonymous NFS User:/var/lib/nfs:/sbin/nologin postfix❌89:89::/var/spool/postfix:/sbin/nologin haldaemon❌68:68:HAL daemon:/:/sbin/nologin gdm❌42:42::/var/lib/gdm:/sbin/nologin ntp❌38:38::/etc/ntp:/sbin/nologin apache❌48:48:Apache:/var/www:/sbin/nologin radvd❌75:75:radvd user:/:/sbin/nologin qemu❌107:107:qemu user:/:/sbin/nologin pulse❌497:495:PulseAudio System Daemon:/var/run/pulse:/sbin/nologin sshd❌74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin tcpdump❌72:72::/:/sbin/nologin weblogic❌500:500::/home/weblogic:/bin/bash testuser❌0:0::/home/testuser:/bin/bash [root@localhost ~]# [root@localhost ~]# passwd testuser 更改用户 testuser 的密码 。 新的 密码： 重新输入新的 密码： passwd： 所有的身份验证令牌已经成功更新。 [root@localhost ~]#   更新密码与root不同]]></description>
</item><item>
    <title>SSH免密登录</title>
    <link>https://charlesren.github.io/mysite-public/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</link>
    <pubDate>Thu, 04 Mar 2021 16:31:47 &#43;0800</pubDate>
    <author>CharlesRen</author>
    <guid>https://charlesren.github.io/mysite-public/ssh%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</guid>
    <description><![CDATA[1.1.1.1主机名porxy
1.1.1.9主机名app2
1.生成及验证密钥 Linux keygen设置
Linux默认密钥在/root/.ssh/id_rsa
1  ssh-keygen -t rsa -P &#39;&#39; -f /root/.ssh/id_rsa   测试本机免秘钥登录
Linux受信任的主机秘钥在 /root/.ssh/authorized_keys
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  [root@porxy .ssh]# ls id_rsa id_rsa.pub [root@porxy .ssh]# cat /root/.ssh/id_rsa.pub &gt;&gt;authorized_keys [root@porxy .ssh]# ls -al 总用量 16 drwx------ 2 root root 58 11月 1 15:48 .]]></description>
</item></channel>
</rss>
